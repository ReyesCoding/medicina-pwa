{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive Medicine Curriculum Planner web application designed for medical students following the UTESA 2013 Medicine curriculum. The system is built as a full-stack Progressive Web App (PWA) that helps students plan their degree across 18 terms plus a capstone/thesis term. The application provides course management, schedule planning with conflict detection, prerequisite validation, and student progress tracking.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with TypeScript for the user interface\n- **Vite** as the build tool and development server with HMR support\n- **Tailwind CSS** with custom design system for styling\n- **shadcn/ui** component library for consistent UI components\n- **Radix UI** primitives for accessible, headless components\n- **TanStack Query** for client-side state management and data fetching\n- **Wouter** for lightweight client-side routing\n\n## Backend Architecture\n- **Express.js** server with TypeScript\n- **RESTful API** design with `/api` prefix for all endpoints\n- **Middleware-based architecture** with request/response logging\n- **File-based development** with Vite integration for development mode\n- **ESBuild** for production bundling\n\n## Data Storage Solutions\n- **PostgreSQL** as the primary database with Neon serverless hosting\n- **Drizzle ORM** for type-safe database operations and schema management\n- **Local Storage** for client-side persistence of user preferences and progress\n- **JSON files** for static course and section data during development\n\n## Database Schema Design\n- **Courses table**: Core curriculum data with prerequisites, credits, and term information\n- **Sections table**: Class schedules, instructors, and enrollment data\n- **Student Progress table**: Individual course completion tracking\n- **Course Plans table**: Student planning and scheduling data\n- **Relational structure** with foreign key constraints and proper indexing\n\n## Authentication and Authorization\n- **Session-based authentication** with PostgreSQL session storage\n- **Connect-pg-simple** for session persistence\n- **Role-based access** with admin mode for curriculum management\n- **URL parameter authentication** for admin features (`?admin=...`)\n\n## Progressive Web App Features\n- **Service Worker** with network-first caching strategy\n- **Web App Manifest** for installable experience\n- **Responsive design** optimized for mobile and desktop\n- **Offline capabilities** with local data caching\n\n## State Management Pattern\n- **Custom hooks** for domain-specific logic (courses, progress, scheduling)\n- **Local Storage persistence** for user data\n- **React Query** for server state synchronization\n- **Context providers** for global state where needed\n\n## Schedule Management System\n- **Conflict detection** algorithm for overlapping time slots\n- **Prerequisites validation** engine\n- **Credit limit enforcement** per term\n- **Elective grouping** by type (GEN, BASICAS, CLINICAS)\n\n## Development Workflow\n- **TypeScript** throughout the stack for type safety\n- **Path aliasing** for clean imports (@/, @shared/, @assets/)\n- **ESLint and Prettier** integration for code quality\n- **Hot module replacement** for rapid development\n\n# External Dependencies\n\n## Database and ORM\n- **Neon Database** - Serverless PostgreSQL hosting\n- **Drizzle ORM** - Type-safe database operations\n- **Drizzle Kit** - Database migrations and schema management\n\n## UI and Styling\n- **Tailwind CSS** - Utility-first CSS framework\n- **Radix UI** - Headless component primitives\n- **Lucide React** - Icon library\n- **Class Variance Authority** - Component variant management\n\n## Development and Build Tools\n- **Vite** - Frontend build tool and dev server\n- **TypeScript** - Static typing\n- **ESBuild** - Production bundling\n- **PostCSS** - CSS processing with Autoprefixer\n\n## Runtime Libraries\n- **React** - Frontend framework\n- **Express** - Backend server framework\n- **TanStack Query** - Data fetching and caching\n- **React Hook Form** - Form management\n- **Date-fns** - Date manipulation utilities\n\n## PWA and Performance\n- **Workbox** - Service worker management (via Vite plugin)\n- **Web App Manifest** - PWA configuration\n- **React Router** alternative (Wouter) for lightweight routing\n\n## Session and State Management\n- **Express Session** - Server-side session management\n- **Connect-pg-simple** - PostgreSQL session store\n- **Local Storage** - Client-side persistence\n\n## Deployment and Hosting\n- **Replit** - Development environment with live preview\n- **Node.js** - Server runtime environment","size_bytes":4641},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCourseSchema, insertSectionSchema } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { courses as coursesTable, sections as sectionsTable } from \"@shared/schema\";\nimport coursesData from \"../client/src/data/courses.json\";\nimport sectionsData from \"../client/src/data/sections.json\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.get(\"/api/courses\", async (_req, res) => {\n    try {\n      const courses = await storage.getAllCourses();\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ error: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ error: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error) {\n      console.error(\"Error fetching course:\", error);\n      res.status(500).json({ error: \"Failed to fetch course\" });\n    }\n  });\n\n  app.get(\"/api/sections\", async (_req, res) => {\n    try {\n      const sections = await storage.getAllSections();\n      res.json(sections);\n    } catch (error) {\n      console.error(\"Error fetching sections:\", error);\n      res.status(500).json({ error: \"Failed to fetch sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/course/:courseId\", async (req, res) => {\n    try {\n      const sections = await storage.getSectionsByCourse(req.params.courseId);\n      res.json(sections);\n    } catch (error) {\n      console.error(\"Error fetching sections:\", error);\n      res.status(500).json({ error: \"Failed to fetch sections\" });\n    }\n  });\n\n  app.post(\"/api/admin/courses\", async (req, res) => {\n    try {\n      const validatedData = insertCourseSchema.parse(req.body);\n      const courseData = {\n        ...validatedData,\n        prerequisites: validatedData.prerequisites ?? [],\n        corequisites: validatedData.corequisites ?? [],\n        isElective: validatedData.isElective ?? false,\n      };\n      const course = await storage.createCourse(courseData as any);\n      res.status(201).json(course);\n    } catch (error: any) {\n      console.error(\"Error creating course:\", error);\n      res.status(400).json({ error: error.message || \"Failed to create course\" });\n    }\n  });\n\n  app.put(\"/api/admin/courses/:id\", async (req, res) => {\n    try {\n      const validated = insertCourseSchema.partial().parse(req.body);\n      const updateData: any = {};\n      \n      if (validated.name !== undefined) updateData.name = validated.name;\n      if (validated.credits !== undefined) updateData.credits = validated.credits;\n      if (validated.theoreticalHours !== undefined) updateData.theoreticalHours = validated.theoreticalHours;\n      if (validated.practicalHours !== undefined) updateData.practicalHours = validated.practicalHours;\n      if (validated.term !== undefined) updateData.term = validated.term;\n      if (validated.block !== undefined) updateData.block = validated.block;\n      if (validated.prerequisites !== undefined) updateData.prerequisites = validated.prerequisites ?? [];\n      if (validated.corequisites !== undefined) updateData.corequisites = validated.corequisites ?? [];\n      if (validated.isElective !== undefined) updateData.isElective = validated.isElective;\n      if (validated.electiveType !== undefined) updateData.electiveType = validated.electiveType;\n      if (validated.description !== undefined) updateData.description = validated.description;\n      \n      const course = await storage.updateCourse(req.params.id, updateData);\n      if (!course) {\n        return res.status(404).json({ error: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error: any) {\n      console.error(\"Error updating course:\", error);\n      res.status(400).json({ error: error.message || \"Failed to update course\" });\n    }\n  });\n\n  app.delete(\"/api/admin/courses/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCourse(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Course not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting course:\", error);\n      res.status(500).json({ error: \"Failed to delete course\" });\n    }\n  });\n\n  app.post(\"/api/admin/sections\", async (req, res) => {\n    try {\n      const validatedData = insertSectionSchema.parse(req.body);\n      const sectionData = {\n        ...validatedData,\n        maxCapacity: validatedData.maxCapacity ?? 30,\n        currentEnrollment: validatedData.currentEnrollment ?? 0,\n      };\n      const section = await storage.createSection(sectionData as any);\n      res.status(201).json(section);\n    } catch (error: any) {\n      console.error(\"Error creating section:\", error);\n      res.status(400).json({ error: error.message || \"Failed to create section\" });\n    }\n  });\n\n  app.put(\"/api/admin/sections/:id\", async (req, res) => {\n    try {\n      const validated = insertSectionSchema.partial().parse(req.body);\n      const updateData: any = {};\n      \n      if (validated.courseId !== undefined) updateData.courseId = validated.courseId;\n      if (validated.sectionNumber !== undefined) updateData.sectionNumber = validated.sectionNumber;\n      if (validated.instructor !== undefined) updateData.instructor = validated.instructor;\n      if (validated.room !== undefined) updateData.room = validated.room;\n      if (validated.crn !== undefined) updateData.crn = validated.crn;\n      if (validated.schedule !== undefined) updateData.schedule = validated.schedule;\n      if (validated.maxCapacity !== undefined) updateData.maxCapacity = validated.maxCapacity;\n      if (validated.currentEnrollment !== undefined) updateData.currentEnrollment = validated.currentEnrollment;\n      \n      const section = await storage.updateSection(req.params.id, updateData);\n      if (!section) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.json(section);\n    } catch (error: any) {\n      console.error(\"Error updating section:\", error);\n      res.status(400).json({ error: error.message || \"Failed to update section\" });\n    }\n  });\n\n  app.delete(\"/api/admin/sections/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSection(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Section not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting section:\", error);\n      res.status(500).json({ error: \"Failed to delete section\" });\n    }\n  });\n\n  app.post(\"/api/admin/seed-database\", async (_req, res) => {\n    try {\n      console.log(\"Starting database seed from API...\");\n      let coursesInserted = 0;\n      let sectionsInserted = 0;\n\n      for (const course of coursesData) {\n        await db.insert(coursesTable).values(course).onConflictDoNothing();\n        coursesInserted++;\n      }\n\n      for (const section of sectionsData) {\n        await db.insert(sectionsTable).values(section).onConflictDoNothing();\n        sectionsInserted++;\n      }\n\n      console.log(`Database seeded: ${coursesInserted} courses, ${sectionsInserted} sections`);\n      res.json({ \n        success: true, \n        message: `Database seeded successfully! Inserted ${coursesInserted} courses and ${sectionsInserted} sections.`,\n        coursesInserted,\n        sectionsInserted\n      });\n    } catch (error) {\n      console.error(\"Error seeding database:\", error);\n      res.status(500).json({ error: \"Failed to seed database\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":7826},"server/storage.ts":{"content":"import { type Course, type Section, type StudentProgress, courses, sections } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getCourse(id: string): Promise<Course | undefined>;\n  getAllCourses(): Promise<Course[]>;\n  getSection(id: string): Promise<Section | undefined>;\n  getSectionsByCourse(courseId: string): Promise<Section[]>;\n  getAllSections(): Promise<Section[]>;\n  getStudentProgress(studentId: string): Promise<StudentProgress[]>;\n  updateStudentProgress(progress: StudentProgress): Promise<StudentProgress>;\n  createCourse(course: Course): Promise<Course>;\n  updateCourse(id: string, course: Partial<Course>): Promise<Course | undefined>;\n  deleteCourse(id: string): Promise<boolean>;\n  createSection(section: Omit<Section, \"id\">): Promise<Section>;\n  updateSection(id: string, section: Partial<Section>): Promise<Section | undefined>;\n  deleteSection(id: string): Promise<boolean>;\n}\n\nexport class DbStorage implements IStorage {\n  async getCourse(id: string): Promise<Course | undefined> {\n    const result = await db.select().from(courses).where(eq(courses.id, id));\n    return result[0];\n  }\n\n  async getAllCourses(): Promise<Course[]> {\n    return await db.select().from(courses);\n  }\n\n  async getSection(id: string): Promise<Section | undefined> {\n    const result = await db.select().from(sections).where(eq(sections.id, id));\n    return result[0];\n  }\n\n  async getSectionsByCourse(courseId: string): Promise<Section[]> {\n    return await db.select().from(sections).where(eq(sections.courseId, courseId));\n  }\n\n  async getAllSections(): Promise<Section[]> {\n    return await db.select().from(sections);\n  }\n\n  async getStudentProgress(_studentId: string): Promise<StudentProgress[]> {\n    return [];\n  }\n\n  async updateStudentProgress(progressItem: StudentProgress): Promise<StudentProgress> {\n    return progressItem;\n  }\n\n  async createCourse(course: Course): Promise<Course> {\n    const result = await db.insert(courses).values(course).returning();\n    return result[0];\n  }\n\n  async updateCourse(id: string, courseUpdate: Partial<Course>): Promise<Course | undefined> {\n    const result = await db\n      .update(courses)\n      .set(courseUpdate)\n      .where(eq(courses.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCourse(id: string): Promise<boolean> {\n    const result = await db.delete(courses).where(eq(courses.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async createSection(section: Omit<Section, \"id\">): Promise<Section> {\n    const result = await db.insert(sections).values(section).returning();\n    return result[0];\n  }\n\n  async updateSection(id: string, sectionUpdate: Partial<Section>): Promise<Section | undefined> {\n    const result = await db\n      .update(sections)\n      .set(sectionUpdate)\n      .where(eq(sections.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSection(id: string): Promise<boolean> {\n    const result = await db.delete(sections).where(eq(sections.id, id)).returning();\n    return result.length > 0;\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":3171},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Course schema\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey(), // Course code like \"ESP-095\"\n  name: text(\"name\").notNull(),\n  credits: integer(\"credits\").notNull(),\n  theoreticalHours: integer(\"theoretical_hours\").notNull(),\n  practicalHours: integer(\"practical_hours\").notNull(),\n  term: integer(\"term\").notNull(),\n  block: text(\"block\").notNull(), // PREMÉDICA, CIENCIAS BÁSICAS, etc.\n  prerequisites: jsonb(\"prerequisites\").$type<string[]>().default([]),\n  corequisites: jsonb(\"corequisites\").$type<string[]>().default([]),\n  isElective: boolean(\"is_elective\").default(false),\n  electiveType: text(\"elective_type\"), // GEN, BASICAS, CLINICAS\n  description: text(\"description\"),\n});\n\nexport const sections = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  sectionNumber: text(\"section_number\").notNull(),\n  instructor: text(\"instructor\").notNull(),\n  room: text(\"room\").notNull(),\n  crn: text(\"crn\").notNull().unique(),\n  schedule: jsonb(\"schedule\").$type<{day: string, startTime: string, endTime: string}[]>().notNull(),\n  maxCapacity: integer(\"max_capacity\").default(30),\n  currentEnrollment: integer(\"current_enrollment\").default(0),\n});\n\nexport const studentProgress = pgTable(\"student_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull(),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  status: text(\"status\").notNull(), // \"passed\", \"in_progress\", \"planned\"\n  grade: text(\"grade\"),\n  completedAt: text(\"completed_at\"),\n  sectionId: varchar(\"section_id\").references(() => sections.id),\n});\n\nexport const coursePlans = pgTable(\"course_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull(),\n  courseId: varchar(\"course_id\").notNull().references(() => courses.id),\n  plannedTerm: integer(\"planned_term\").notNull(),\n  sectionId: varchar(\"section_id\").references(() => sections.id),\n  priority: integer(\"priority\").default(1),\n});\n\n// Insert schemas\nexport const insertCourseSchema = createInsertSchema(courses);\nexport const insertSectionSchema = createInsertSchema(sections);\nexport const insertStudentProgressSchema = createInsertSchema(studentProgress);\nexport const insertCoursePlanSchema = createInsertSchema(coursePlans);\n\n// Types\nexport type Course = typeof courses.$inferSelect;\nexport type Section = typeof sections.$inferSelect;\nexport type StudentProgress = typeof studentProgress.$inferSelect;\nexport type CoursePlan = typeof coursePlans.$inferSelect;\n\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\nexport type InsertStudentProgress = z.infer<typeof insertStudentProgressSchema>;\nexport type InsertCoursePlan = z.infer<typeof insertCoursePlanSchema>;\n","size_bytes":3162},"client/public/sw.js":{"content":"const CACHE_NAME = 'medicina-planner-v1';\nconst urlsToCache = [\n  '/',\n  '/src/main.tsx',\n  '/src/index.css',\n  '/src/data/courses.json',\n  '/src/data/sections.json'\n];\n\n// Install event\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        return fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Background sync for offline data\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nfunction doBackgroundSync() {\n  // Sync offline changes when network is available\n  return new Promise((resolve) => {\n    console.log('Background sync triggered');\n    resolve();\n  });\n}\n\n// Push notifications (future feature)\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'Nueva actualización disponible',\n    icon: '/manifest-icon-192.png',\n    badge: '/manifest-icon-192.png'\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('Medicine Planner', options)\n  );\n});\n","size_bytes":1818},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { StudentProgressProvider } from \"@/contexts/student-progress-context\";\nimport { Dashboard } from \"@/pages/dashboard\";\nimport { AdminCourses } from \"@/pages/admin-courses\";\nimport { AdminSections } from \"@/pages/admin-sections\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/admin/courses\" component={AdminCourses} />\n      <Route path=\"/admin/sections\" component={AdminSections} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <StudentProgressProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </StudentProgressProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1108},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 12px;\n  --background: hsl(221, 39%, 11%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(224, 30%, 15%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(224, 30%, 15%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 28%, 17%);\n  --muted-foreground: hsl(217, 10%, 64%);\n  --accent: hsl(215, 28%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Inter', system-ui, sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  \n  /* Custom semantic colors for status */\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(142, 76%, 36%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(48, 96%, 53%);\n  --info: hsl(199, 89%, 48%);\n  --info-foreground: hsl(205, 96%, 53%);\n}\n\n/* Mobile sticky header fixes */\n@supports (-webkit-overflow-scrolling: touch) {\n  .mobile-sticky-header {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n    -webkit-transform: translateZ(0);\n    transform: translateZ(0);\n  }\n}\n\n/* Ensure sticky headers work in scrollable containers */\n.sticky-header {\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n}\n\n.list-item {\n  display: flex;\n  gap: 16px;\n  align-items: flex-start;\n  padding: 14px 0;\n  border-bottom: 1px solid var(--border);\n  flex-wrap: wrap;\n}\n\n.li-left {\n  flex: 1 1 480px;\n  min-width: 280px;\n}\n\n.li-right {\n  margin-left: auto;\n  flex: 0 0 auto;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: flex-end;\n  min-width: 180px;\n}\n\n.pill {\n  padding: 4px 10px;\n  border-radius: 999px;\n  font-size: 12px;\n  background: var(--muted);\n  color: var(--muted-foreground);\n  border: 1px solid var(--border);\n  display: inline-block;\n}\n\n.pill.ok {\n  background: hsl(142, 85%, 8%);\n  color: hsl(142, 76%, 73%);\n  border-color: var(--success);\n}\n\n.pill.bad {\n  background: hsl(0, 85%, 8%);\n  color: hsl(0, 76%, 73%);\n  border-color: var(--destructive);\n}\n\n.pill.passed {\n  background: hsl(221, 39%, 11%);\n  color: hsl(217, 10%, 64%);\n  border-color: var(--border);\n}\n\n.list-item.is-passed {\n  opacity: 0.55;\n}\n\n.tag {\n  font-size: 12px;\n  font-weight: 700;\n  padding: 3px 8px;\n  border-radius: 999px;\n  margin-left: 8px;\n  border: 1px solid;\n  display: inline-block;\n}\n\n.tag-elec.gen {\n  background: hsl(45, 85%, 8%);\n  color: hsl(45, 76%, 73%);\n  border-color: var(--warning);\n}\n\n.tag-elec.basicas {\n  background: hsl(142, 85%, 8%);\n  color: hsl(142, 76%, 73%);\n  border-color: var(--success);\n}\n\n.tag-elec.clinicas {\n  background: hsl(217, 85%, 8%);\n  color: hsl(217, 76%, 73%);\n  border-color: var(--primary);\n}\n\n.scrollable {\n  max-height: calc(100vh - 120px);\n  overflow-y: auto;\n}\n\n.scrollable::-webkit-scrollbar {\n  width: 6px;\n}\n\n.scrollable::-webkit-scrollbar-track {\n  background: var(--muted);\n}\n\n.scrollable::-webkit-scrollbar-thumb {\n  background: var(--border);\n  border-radius: 3px;\n}\n\n.conflict-warning {\n  background: hsl(0, 85%, 8%);\n  color: hsl(0, 76%, 73%);\n  border: 1px solid var(--destructive);\n  border-radius: var(--radius);\n  padding: 8px 12px;\n  font-size: 12px;\n  margin-top: 4px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4035},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// Register service worker for PWA functionality\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":551},"client/src/components/admin-panel.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Settings, Database } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function AdminPanel() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isSeeding, setIsSeeding] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    setIsVisible(urlParams.has('admin'));\n  }, []);\n\n  const handleSeedDatabase = async () => {\n    if (!confirm('This will load all courses and sections from the JSON files into the database. Continue?')) {\n      return;\n    }\n\n    setIsSeeding(true);\n    try {\n      const response = await apiRequest('/api/admin/seed-database', 'POST') as any;\n      toast({\n        title: 'Success!',\n        description: response.message,\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to seed database. Check console for details.',\n        variant: 'destructive',\n      });\n      console.error('Seed error:', error);\n    } finally {\n      setIsSeeding(false);\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <Card className=\"fixed bottom-4 right-4 w-80 shadow-lg z-50\" data-testid=\"admin-panel\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Admin Panel\n          </CardTitle>\n          <span className=\"text-xs text-muted-foreground\">?admin=true</span>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        <p className=\"text-xs text-muted-foreground mb-4\">\n          Manage courses and sections in the system\n        </p>\n        <div className=\"space-y-2\">\n          <Link href=\"/admin/courses\">\n            <Button \n              size=\"sm\" \n              className=\"w-full text-xs\"\n              data-testid=\"admin-courses-btn\"\n            >\n              Manage Courses\n            </Button>\n          </Link>\n          <Link href=\"/admin/sections\">\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              className=\"w-full text-xs\"\n              data-testid=\"admin-sections-btn\"\n            >\n              Manage Sections\n            </Button>\n          </Link>\n          <Button \n            size=\"sm\" \n            variant=\"secondary\"\n            className=\"w-full text-xs\"\n            onClick={handleSeedDatabase}\n            disabled={isSeeding}\n            data-testid=\"admin-seed-btn\"\n          >\n            <Database className=\"h-3 w-3 mr-1\" />\n            {isSeeding ? 'Seeding...' : 'Seed Database'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3013},"client/src/components/course-detail.tsx":{"content":"import { useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Course } from '@/types';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\nimport { GradeInputDialog } from '@/components/grade-input-dialog';\n\ninterface CourseDetailProps {\n  course?: Course;\n}\n\nexport function CourseDetail({ course }: CourseDetailProps) {\n  const { getCourseById } = useCourseData();\n  const { getCourseStatus, getPassedCourses, getPlannedCourses, markCoursePassed, removeCourseProgress } = useStudentProgress();\n  const [gradeDialogOpen, setGradeDialogOpen] = useState(false);\n\n  if (!course) {\n    return null; // Return nothing when no course is selected (inline mode)\n  }\n\n  const passedCourses = getPassedCourses();\n  const plannedCourses = getPlannedCourses();\n  const status = getCourseStatus(course, passedCourses, plannedCourses);\n  const isPassed = status === 'passed';\n  const isBlocked = status === 'blocked';\n\n  const getStatusBadge = () => {\n    switch (status) {\n      case 'available':\n        return <Badge variant=\"default\" className=\"pill ok\">Disponible</Badge>;\n      case 'blocked':\n        return <Badge variant=\"destructive\" className=\"pill bad\">Bloqueada</Badge>;\n      case 'passed':\n        return <Badge variant=\"secondary\" className=\"pill passed\">Aprobada</Badge>;\n    }\n  };\n\n  const getElectiveTag = () => {\n    if (!course.isElective) return null;\n    \n    const tagClass = course.electiveType === 'general' ? 'tag-elec gen' : 'tag-elec professional';\n    const displayText = course.electiveType === 'general' ? 'General' : 'Profesionalizante';\n    \n    return (\n      <span className={`tag ${tagClass}`}>\n        Electiva • {displayText}\n      </span>\n    );\n  };\n\n  const handleMarkPassed = () => {\n    setGradeDialogOpen(true);\n  };\n\n  const handleUndoPassed = () => {\n    removeCourseProgress(course.id);\n  };\n\n  const handleGradeConfirm = (grade: string) => {\n    markCoursePassed(course.id, grade);\n    setGradeDialogOpen(false);\n  };\n\n  const handleGradeCancel = () => {\n    setGradeDialogOpen(false);\n  };\n\n\n  return (\n    <div className=\"space-y-4 p-4 h-full overflow-y-auto\">\n      {/* Course Header */}\n      <div className=\"space-y-3\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-semibold text-foreground leading-tight break-words\">\n            {course.id} - {course.name}\n          </h3>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          {getStatusBadge()}\n          {getElectiveTag()}\n        </div>\n        \n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <div>{course.block}</div>\n          <div>{course.credits} créditos • HT {course.theoreticalHours} • HP {course.practicalHours}</div>\n        </div>\n        \n        <p className=\"text-xs text-muted-foreground line-clamp-3 leading-relaxed\">\n          {course.description || 'Sin descripción disponible.'}\n        </p>\n      </div>\n      \n      {/* Prerequisites & Corequisites */}\n      <div className=\"space-y-4\">\n        <div>\n          <h4 className=\"font-medium text-foreground mb-2 text-sm\">Prerrequisitos</h4>\n          <div className=\"space-y-2\">\n            {course.prerequisites.length > 0 ? (\n              course.prerequisites.map(prereq => {\n                const prereqCourse = getCourseById(prereq);\n                return (\n                  <div key={prereq} className=\"text-xs\" data-testid={`prereq-${prereq}`}>\n                    <Badge variant=\"outline\" className=\"text-xs mr-2\">\n                      {prereq}\n                    </Badge>\n                    {prereqCourse && (\n                      <span className=\"text-muted-foreground break-words\">{prereqCourse.name}</span>\n                    )}\n                  </div>\n                );\n              })\n            ) : (\n              <span className=\"text-xs text-muted-foreground\">Ninguno</span>\n            )}\n          </div>\n          {course.prerequisites.length > 0 && (\n            <p className=\"mt-2 text-xs text-muted-foreground\">\n              Debes completar estas materias antes de tomar esta.\n            </p>\n          )}\n        </div>\n        \n        <div>\n          <h4 className=\"font-medium text-foreground mb-2 text-sm\">Correquisitos</h4>\n          <div className=\"space-y-2\">\n            {course.corequisites.length > 0 ? (\n              course.corequisites.map(coreq => {\n                const coreqCourse = getCourseById(coreq);\n                return (\n                  <div key={coreq} className=\"text-xs\" data-testid={`coreq-${coreq}`}>\n                    <Badge variant=\"outline\" className=\"text-xs mr-2\">\n                      {coreq}\n                    </Badge>\n                    {coreqCourse && (\n                      <span className=\"text-muted-foreground break-words\">{coreqCourse.name}</span>\n                    )}\n                  </div>\n                );\n              })\n            ) : (\n              <span className=\"text-xs text-muted-foreground\">Ninguno</span>\n            )}\n          </div>\n          {course.corequisites.length > 0 && (\n            <p className=\"mt-2 text-xs text-muted-foreground\">\n              Debes tomar estas materias al mismo tiempo.\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Grade Management Section */}\n      <div className=\"border-t border-border pt-4\">\n        <h4 className=\"font-medium text-foreground text-sm mb-3\">Gestión de Calificaciones</h4>\n        <div className=\"space-y-2\">\n          {!isPassed ? (\n            <Button \n              size=\"sm\" \n              variant=\"default\"\n              disabled={isBlocked}\n              onClick={handleMarkPassed}\n              data-testid={`mark-passed-${course.id}`}\n              className=\"w-full\"\n            >\n              ✓ Marcar como Aprobada\n            </Button>\n          ) : (\n            <Button \n              size=\"sm\" \n              variant=\"destructive\"\n              onClick={handleUndoPassed}\n              data-testid={`undo-passed-${course.id}`}\n              className=\"w-full\"\n            >\n              ✗ Deshacer Aprobación\n            </Button>\n          )}\n          {isBlocked && (\n            <p className=\"text-xs text-muted-foreground\">\n              Completa los prerrequisitos para poder aprobar esta materia.\n            </p>\n          )}\n        </div>\n      </div>\n\n      <GradeInputDialog\n        open={gradeDialogOpen}\n        onClose={handleGradeCancel}\n        onConfirm={handleGradeConfirm}\n        courseName={`${course.id} - ${course.name}`}\n      />\n    </div>\n  );\n}\n","size_bytes":6699},"client/src/components/course-list.tsx":{"content":"import { useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Course, FilterState, CourseStatus } from '@/types';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\nimport { useSchedule } from '@/hooks/use-schedule';\nimport { cn } from '@/lib/utils';\n\ninterface CourseListProps {\n  filters: FilterState;\n  onCourseSelect: (course: Course) => void;\n  selectedCourse?: Course;\n  onShowPlanModal: () => void;\n}\n\nexport function CourseList({ filters, onCourseSelect, selectedCourse, onShowPlanModal }: CourseListProps) {\n  const { courses, getAllTerms } = useCourseData();\n  const { getCourseStatus, passedCourses, getPlannedCourses } = useStudentProgress();\n  const { getCoursesInPlan } = useSchedule();\n\n  const plannedCourses = getCoursesInPlan();\n  const progressPlannedCourses = getPlannedCourses();\n  const terms = getAllTerms();\n\n  const filteredCourses = useMemo(() => {\n    return courses.filter(course => {\n      // Term filter\n      if (filters.term && course.term !== filters.term) return false;\n      \n      // Status filter\n      if (filters.status) {\n        const status = getCourseStatus(course, passedCourses, progressPlannedCourses);\n        if (status !== filters.status) return false;\n      }\n      \n      // Electives only filter\n      if (filters.electivesOnly && !course.isElective) return false;\n      \n      // In plan only filter\n      if (filters.inPlanOnly && !plannedCourses.has(course.id)) return false;\n      \n      // Search filter\n      if (filters.searchTerm) {\n        const searchLower = filters.searchTerm.toLowerCase();\n        if (!course.id.toLowerCase().includes(searchLower) && \n            !course.name.toLowerCase().includes(searchLower)) {\n          return false;\n        }\n      }\n      \n      return true;\n    });\n  }, [courses, filters, passedCourses, plannedCourses, progressPlannedCourses]);\n\n  const groupedCourses = useMemo(() => {\n    const groups = new Map();\n    const electiveGroups = new Map();\n    \n    filteredCourses.forEach(course => {\n      if (course.isElective) {\n        // Handle electives - group by elective type and place after their base term\n        const baseTerms = {\n          'general': 6,  // Electivas Generales after Term 6\n          'professional': course.term > 11 ? 15 : 11  // Professional electives: Basic Sciences (11) or Clinical (15)\n        };\n        const baseTerm = baseTerms[course.electiveType as keyof typeof baseTerms] || course.term;\n        \n        if (!electiveGroups.has(baseTerm)) {\n          const electiveName = course.electiveType === 'general' ? 'Electivas Generales' : \n                              baseTerm === 11 ? 'Electivas Profesionalizantes - Ciencias Básicas' :\n                              'Electivas Profesionalizantes - Ciencias Clínicas';\n          \n          electiveGroups.set(baseTerm, {\n            term: baseTerm,\n            name: electiveName,\n            block: 'ELECTIVAS',\n            courses: [],\n            isElective: true,\n            electiveType: course.electiveType\n          });\n        }\n        electiveGroups.get(baseTerm).courses.push(course);\n      } else {\n        // Handle regular courses\n        if (!groups.has(course.term)) {\n          const termInfo = terms.find(t => t.term === course.term);\n          groups.set(course.term, {\n            term: course.term,\n            name: termInfo?.name || `Cuatrimestre ${course.term}`,\n            block: termInfo?.block || course.block,\n            courses: [],\n            isElective: false\n          });\n        }\n        groups.get(course.term).courses.push(course);\n      }\n    });\n    \n    // Merge regular courses and electives, maintaining order\n    const allGroups = [...Array.from(groups.values()), ...Array.from(electiveGroups.values())]\n      .sort((a, b) => {\n        if (a.term !== b.term) return a.term - b.term;\n        // Electives come after regular courses for the same term\n        return a.isElective ? 1 : -1;\n      });\n    \n    return allGroups;\n  }, [filteredCourses, terms]);\n\n  const getStatusBadge = (course: Course) => {\n    const status = getCourseStatus(course, passedCourses, progressPlannedCourses);\n    \n    switch (status) {\n      case 'available':\n        return <Badge variant=\"default\" className=\"pill ok\">Disponible</Badge>;\n      case 'blocked':\n        return <Badge variant=\"destructive\" className=\"pill bad\">Bloqueada</Badge>;\n      case 'passed':\n        return <Badge variant=\"secondary\" className=\"pill passed\">Aprobada</Badge>;\n    }\n  };\n\n  const getElectiveTag = (course: Course) => {\n    if (!course.isElective) return null;\n    \n    const tagClass = course.electiveType === 'general' ? 'tag-elec gen' : 'tag-elec professional';\n    const displayText = course.electiveType === 'general' ? 'General' : 'Profesionalizante';\n    \n    return (\n      <span className={`tag ${tagClass}`}>\n        Electiva • {displayText}\n      </span>\n    );\n  };\n\n  const handleSuggestPlan = () => {\n    onShowPlanModal();\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Catálogo de Materias</h2>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"course-count\">\n              {filteredCourses.length} materias\n            </span>\n            <Button \n              size=\"sm\" \n              onClick={handleSuggestPlan}\n              data-testid=\"suggest-plan-btn\"\n            >\n              Sugerir Plan\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Course Grid */}\n      <div className=\"flex-1 p-6 space-y-8\">\n          {groupedCourses.map(group => (\n            <div key={`${group.term}-${group.isElective ? 'elective' : 'regular'}`} className=\"space-y-6\">\n              {/* Sticky Semester Header */}\n              <div className={cn(\n                \"sticky-header mobile-sticky-header py-4 px-6 -mx-6 bg-background/95 backdrop-blur-sm border-b border-border\",\n                group.isElective && \"bg-orange-50/80 dark:bg-orange-950/30 border-orange-200 dark:border-orange-800\"\n              )}>\n                <div className=\"flex items-center gap-3\">\n                  <span className={cn(\n                    \"w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold\",\n                    group.isElective \n                      ? \"bg-orange-500 text-white\" \n                      : \"bg-primary text-primary-foreground\"\n                  )}>\n                    {group.isElective ? '⭐' : group.term}\n                  </span>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground\">\n                      {group.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {group.block} • {group.courses.length} materias • {group.courses.reduce((sum: number, c: Course) => sum + c.credits, 0)} créditos\n                      {group.isElective && \" • Elige tus electivas\"}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Course Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {group.courses.map((course: Course) => {\n                  const status = getCourseStatus(course, passedCourses, progressPlannedCourses);\n                  const isPassed = status === 'passed';\n                  const isBlocked = status === 'blocked';\n                  const isSelected = selectedCourse?.id === course.id;\n                  \n                  return (\n                    <div key={course.id} className=\"space-y-0\">\n                      {/* Course Card */}\n                      <Card \n                        className={cn(\n                          \"cursor-pointer transition-all duration-200 hover:shadow-md hover:scale-[1.02]\",\n                          isPassed && \"ring-2 ring-green-200 bg-green-50/50 dark:ring-green-800 dark:bg-green-950/20\",\n                          isBlocked && \"opacity-60 bg-muted/30\",\n                          isSelected && \"ring-2 ring-primary bg-accent\",\n                          group.isElective && !isPassed && \"border-orange-200 dark:border-orange-800\"\n                        )}\n                        onClick={() => onCourseSelect(course)}\n                        data-testid={`course-item-${course.id}`}\n                      >\n                        <CardHeader className=\"pb-3\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-start justify-between gap-2\">\n                              <CardTitle className=\"text-sm font-semibold text-primary truncate flex-1 min-w-0\">\n                                {course.id}\n                              </CardTitle>\n                              <div className=\"flex-shrink-0\">\n                                {getStatusBadge(course)}\n                              </div>\n                            </div>\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-foreground font-medium line-clamp-3 leading-tight break-words\">\n                                {course.name}\n                              </p>\n                              {getElectiveTag(course)}\n                            </div>\n                          </div>\n                        </CardHeader>\n                        \n                        <CardContent className=\"pt-0 space-y-3\">\n                          <div className=\"text-xs text-muted-foreground space-y-1\">\n                            <div>{course.credits} créditos</div>\n                            <div>HT: {course.theoreticalHours} • HP: {course.practicalHours}</div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                      \n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10451},"client/src/components/navigation.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { FilterState, CourseStatus } from '@/types';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\nimport { List, ClipboardList, TrendingUp } from 'lucide-react';\n\ninterface NavigationProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n  activeView: string;\n  onViewChange: (view: string) => void;\n  onShowPlanModal: () => void;\n}\n\nexport function Navigation({ \n  filters, \n  onFiltersChange, \n  activeView, \n  onViewChange, \n  onShowPlanModal \n}: NavigationProps) {\n  const { getAllTerms, courses } = useCourseData();\n  const { calculateGPA, getTotalCredits } = useStudentProgress();\n  \n  const terms = getAllTerms();\n  const gpa = calculateGPA();\n\n  const handleStatusFilter = (status: CourseStatus | 'all') => {\n    onFiltersChange({\n      ...filters,\n      status: status === 'all' ? null : status\n    });\n  };\n\n  return (\n    <nav className=\"w-64 bg-card border-r border-border flex flex-col\">\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"space-y-2\">\n          <Button \n            variant={activeView === 'courses' ? 'default' : 'ghost'}\n            className=\"w-full justify-start gap-3\"\n            onClick={() => onViewChange('courses')}\n            data-testid=\"nav-course-list\"\n          >\n            <List className=\"w-4 h-4\" />\n            Lista de Materias\n          </Button>\n          <Button \n            variant=\"ghost\"\n            className=\"w-full justify-start gap-3\"\n            onClick={onShowPlanModal}\n            data-testid=\"nav-my-plan\"\n          >\n            <ClipboardList className=\"w-4 h-4\" />\n            Mi Plan\n          </Button>\n          <Button \n            variant={activeView === 'progress' ? 'default' : 'ghost'}\n            className=\"w-full justify-start gap-3\"\n            onClick={() => onViewChange('progress')}\n            data-testid=\"nav-progress\"\n          >\n            <TrendingUp className=\"w-4 h-4\" />\n            Progreso\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"p-4 flex-1\">\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n              Filtros\n            </label>\n            <div className=\"mt-2 space-y-2\">\n              <Select \n                value={filters.term?.toString() || \"\"} \n                onValueChange={(value) => onFiltersChange({\n                  ...filters,\n                  term: value && value !== \"all\" ? parseInt(value) : null\n                })}\n              >\n                <SelectTrigger data-testid=\"filter-term\">\n                  <SelectValue placeholder=\"Todos los Semestres\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los Semestres</SelectItem>\n                  {terms.map(term => (\n                    <SelectItem key={term.term} value={term.term.toString()}>\n                      Semestre {term.term} - {term.block}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              \n              <div className=\"flex flex-wrap gap-1\">\n                <Button\n                  size=\"sm\"\n                  variant={filters.status === null ? \"default\" : \"outline\"}\n                  className=\"text-xs\"\n                  onClick={() => handleStatusFilter('all')}\n                  data-testid=\"filter-all\"\n                >\n                  Todas\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={filters.status === 'available' ? \"default\" : \"outline\"}\n                  className=\"text-xs\"\n                  onClick={() => handleStatusFilter('available')}\n                  data-testid=\"filter-available\"\n                >\n                  Disponibles\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={filters.status === 'blocked' ? \"default\" : \"outline\"}\n                  className=\"text-xs\"\n                  onClick={() => handleStatusFilter('blocked')}\n                  data-testid=\"filter-blocked\"\n                >\n                  Bloqueadas\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant={filters.status === 'passed' ? \"default\" : \"outline\"}\n                  className=\"text-xs\"\n                  onClick={() => handleStatusFilter('passed')}\n                  data-testid=\"filter-passed\"\n                >\n                  Aprobadas\n                </Button>\n              </div>\n              \n              <div className=\"space-y-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"electives\" \n                    checked={filters.electivesOnly}\n                    onCheckedChange={(checked) => onFiltersChange({\n                      ...filters,\n                      electivesOnly: !!checked\n                    })}\n                    data-testid=\"filter-electives-only\"\n                  />\n                  <label htmlFor=\"electives\" className=\"text-sm text-foreground\">\n                    Solo electivas\n                  </label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"in-plan\" \n                    checked={filters.inPlanOnly}\n                    onCheckedChange={(checked) => onFiltersChange({\n                      ...filters,\n                      inPlanOnly: !!checked\n                    })}\n                    data-testid=\"filter-in-plan\"\n                  />\n                  <label htmlFor=\"in-plan\" className=\"text-sm text-foreground\">\n                    En mi plan\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"pt-4 border-t border-border\">\n            <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n              Buscar\n            </label>\n            <Input \n              type=\"text\" \n              placeholder=\"Código o nombre de materia...\" \n              className=\"mt-2\"\n              value={filters.searchTerm}\n              onChange={(e) => onFiltersChange({\n                ...filters,\n                searchTerm: e.target.value\n              })}\n              data-testid=\"search-input\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"p-4 border-t border-border\">\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <div data-testid=\"nav-credits\">\n            Créditos del Plan: <span className=\"font-medium text-foreground\">0/22</span>\n          </div>\n          <div data-testid=\"nav-gpa\">\n            Índice: <span className=\"font-medium text-foreground\">{gpa.toFixed(2)}</span>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":7343},"client/src/components/plan-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useSchedule } from '@/hooks/use-schedule';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\nimport { X, Plus } from 'lucide-react';\n\ninterface PlanModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function PlanModal({ open, onClose }: PlanModalProps) {\n  const { courses, getSectionsByCourse } = useCourseData();\n  const { \n    coursePlan, \n    addCourseToPlan,\n    removeCourseFromPlan, \n    updateSectionSelection, \n    detectScheduleConflicts,\n    getPlannedTermCredits,\n    suggestCoursesForTerm\n  } = useSchedule();\n  const { getCourseStatus, getPassedCourses } = useStudentProgress();\n\n  const [selectedTerm, setSelectedTerm] = useState<number>(1);\n  \n  const passedCourses = getPassedCourses();\n  const plannedCourses = coursePlan.map(plan => {\n    const course = courses.find(c => c.id === plan.courseId);\n    return course ? { ...course, ...plan } : null;\n  }).filter(Boolean);\n\n  const conflicts = detectScheduleConflicts(\n    coursePlan\n      .map(plan => getSectionsByCourse(plan.courseId))\n      .flat()\n      .filter(section => coursePlan.some(plan => plan.sectionId === section.id))\n  );\n\n  const termCredits = getPlannedTermCredits(selectedTerm, courses);\n  \n  const formatSchedule = (schedule: any[]) => {\n    return schedule.map(slot => \n      `${slot.day.slice(0, 3)} ${slot.startTime}-${slot.endTime}`\n    ).join(', ');\n  };\n\n  const handleRemoveCourse = (courseId: string) => {\n    removeCourseFromPlan(courseId);\n  };\n\n  const handleSectionChange = (courseId: string, sectionId: string) => {\n    updateSectionSelection(courseId, sectionId);\n  };\n\n  const handleSuggestCourses = () => {\n    const plannedCourseIds = new Set(coursePlan.map(plan => plan.courseId));\n    const suggestions = suggestCoursesForTerm(selectedTerm, courses, passedCourses, getCourseStatus);\n    \n    console.log('Suggested courses for term', selectedTerm, ':', suggestions);\n    \n    // Add suggested courses to plan\n    suggestions.forEach(courseId => {\n      const course = courses.find(c => c.id === courseId);\n      if (course && !plannedCourseIds.has(courseId)) {\n        addCourseToPlan(courseId, selectedTerm);\n      }\n    });\n  };\n\n  const getCourseConflicts = (courseId: string) => {\n    return conflicts.filter(conflict => \n      conflict.course1 === courseId || conflict.course2 === courseId\n    );\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle>Mi Plan de Estudios</DialogTitle>\n          <div className=\"flex items-center gap-4 mt-2\">\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"plan-info\">\n              Créditos planificados: {plannedCourses.reduce((sum, course) => sum + (course?.credits || 0), 0)} / 22\n            </div>\n            <Button size=\"sm\" onClick={handleSuggestCourses} data-testid=\"suggest-courses\">\n              Sugerir materias\n            </Button>\n          </div>\n        </DialogHeader>\n        \n        <ScrollArea className=\"max-h-[60vh] p-4\">\n          <div className=\"space-y-6\">\n            {plannedCourses.map(course => {\n              if (!course) return null;\n              \n              const sections = getSectionsByCourse(course.id);\n              const selectedSection = sections.find(s => s.id === course.sectionId);\n              const courseConflicts = getCourseConflicts(course.id);\n              \n              return (\n                <div key={course.id} className=\"p-4 bg-muted rounded-md border border-border\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <div className=\"font-semibold text-foreground\">\n                        {course.id} — {course.name}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {course.credits} créditos • Semestre {course.term}\n                      </div>\n                      {course.isElective && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">\n                          Electiva • {course.electiveType}\n                        </Badge>\n                      )}\n                    </div>\n                    <Button \n                      variant=\"destructive\" \n                      size=\"sm\"\n                      onClick={() => handleRemoveCourse(course.id)}\n                      data-testid={`remove-course-${course.id}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  \n                  {sections.length > 0 && (\n                    <div className=\"space-y-3\">\n                      <div>\n                        <label className=\"text-sm font-medium text-foreground\">Seleccionar Sección</label>\n                        <Select \n                          value={course.sectionId || \"\"} \n                          onValueChange={(sectionId) => handleSectionChange(course.id, sectionId)}\n                        >\n                          <SelectTrigger className=\"mt-1\" data-testid={`section-select-${course.id}`}>\n                            <SelectValue placeholder=\"Elige una sección...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {sections.map(section => (\n                              <SelectItem key={section.id} value={section.id}>\n                                Sec {section.sectionNumber} ({section.instructor}) {formatSchedule(section.schedule)}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        \n                        {courseConflicts.length > 0 && course.sectionId && (\n                          <div className=\"conflict-warning mt-2\" data-testid={`conflict-${course.id}`}>\n                            ⚠️ Schedule conflict with other selected courses\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n            \n            {plannedCourses.length === 0 && (\n              <div className=\"p-8 text-center\">\n                <div className=\"text-muted-foreground mb-4\">No courses in your plan yet</div>\n                <Button data-testid=\"browse-courses\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Browse Available Courses\n                </Button>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7170},"client/src/components/progress-header.tsx":{"content":"import { useEffect } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\n\nexport function ProgressHeader() {\n  const { courses, loading } = useCourseData();\n  const { passedCourses, updateCourses } = useStudentProgress();\n  \n  // Update courses in context when they're loaded\n  useEffect(() => {\n    if (courses.length > 0) {\n      updateCourses(courses);\n    }\n  }, [courses, updateCourses]);\n  \n  console.log('[ProgressHeader] Rendering with passedCourses size:', passedCourses.size, 'courses loaded:', courses.length, 'loading:', loading);\n  console.log('[ProgressHeader] Passed course IDs:', Array.from(passedCourses));\n  \n  // Early return if courses not loaded yet\n  if (loading || courses.length === 0) {\n    console.log('[ProgressHeader] Courses not loaded yet, showing default state');\n    return (\n      <header className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Planificador del Currículo de Medicina</h1>\n            <p className=\"text-sm text-muted-foreground\">Programa UTESA 2013 • 18 Semestres + Proyecto Final</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              <span data-testid=\"courses-passed\">0</span> de <span data-testid=\"total-courses\">42</span> materias aprobadas\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-32 bg-muted rounded-full h-2\">\n                <div \n                  className=\"bg-success h-2 rounded-full transition-all duration-300\" \n                  style={{ width: `0%` }}\n                  data-testid=\"progress-bar\"\n                />\n              </div>\n              <span className=\"text-sm font-medium text-foreground\" data-testid=\"progress-percentage\">\n                0%\n              </span>\n            </div>\n          </div>\n        </div>\n      </header>\n    );\n  }\n  \n  // Calculate totals consistently using reactive passedCourses\n  const passedCount = passedCourses.size;\n  const totalCourses = courses.length;\n  \n  // Calculate passed credits from reactive passedCourses\n  const passedCredits = courses\n    .filter(course => passedCourses.has(course.id))\n    .reduce((sum, course) => sum + course.credits, 0);\n  \n  const totalCredits = courses.reduce((sum, course) => sum + course.credits, 0);\n  const progressPercentage = totalCredits > 0 ? Math.round((passedCredits / totalCredits) * 100) : 0;\n  \n  console.log('[ProgressHeader] FINAL VALUES - passedCount:', passedCount, 'totalCourses:', totalCourses, 'passedCredits:', passedCredits, 'totalCredits:', totalCredits, 'progressPercentage:', progressPercentage);\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Planificador del Currículo de Medicina</h1>\n          <p className=\"text-sm text-muted-foreground\">Programa UTESA 2013 • 18 Semestres + Proyecto Final</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"text-sm text-muted-foreground\">\n            <span data-testid=\"courses-passed\">{passedCount}</span> de <span data-testid=\"total-courses\">{courses.length}</span> materias aprobadas\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-32 bg-muted rounded-full h-2\">\n              <div \n                className=\"bg-success h-2 rounded-full transition-all duration-300\" \n                style={{ width: `${progressPercentage}%` }}\n                data-testid=\"progress-bar\"\n              />\n            </div>\n            <span className=\"text-sm font-medium text-foreground\" data-testid=\"progress-percentage\">\n              {progressPercentage}%\n            </span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4148},"client/src/hooks/use-course-data.ts":{"content":"import { useState, useEffect } from 'react';\nimport { Course, Section } from '@/types';\n\nexport function useCourseData() {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [sections, setSections] = useState<Section[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const [coursesRes, sectionsRes] = await Promise.all([\n          fetch('/api/courses'),\n          fetch('/api/sections')\n        ]);\n\n        if (!coursesRes.ok || !sectionsRes.ok) {\n          throw new Error('Failed to fetch data');\n        }\n\n        const coursesData = await coursesRes.json();\n        const sectionsData = await sectionsRes.json();\n\n        setCourses(coursesData);\n        setSections(sectionsData);\n      } catch (error) {\n        console.error('Error loading course data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  const getCourseById = (id: string) => {\n    return courses.find(course => course.id === id);\n  };\n\n  const getSectionsByCourse = (courseId: string) => {\n    return sections.filter(section => section.courseId === courseId);\n  };\n\n  const getCoursesByTerm = (term: number) => {\n    return courses.filter(course => course.term === term);\n  };\n\n  const getElectivesByType = (type: string) => {\n    return courses.filter(course => course.isElective && course.electiveType === type);\n  };\n\n  const getTermName = (termNumber: number): string => {\n    const termNames: { [key: number]: string } = {\n      1: \"PRIMER CUATRIMESTRE\",\n      2: \"SEGUNDO CUATRIMESTRE\", \n      3: \"TERCER CUATRIMESTRE\",\n      4: \"CUARTO CUATRIMESTRE\",\n      5: \"QUINTO CUATRIMESTRE\",\n      6: \"SEXTO CUATRIMESTRE\",\n      7: \"SÉPTIMO CUATRIMESTRE\",\n      8: \"OCTAVO CUATRIMESTRE\",\n      9: \"NOVENO CUATRIMESTRE\",\n      10: \"DÉCIMO CUATRIMESTRE\",\n      11: \"DÉCIMO PRIMER CUATRIMESTRE\",\n      12: \"DÉCIMO SEGUNDO CUATRIMESTRE\",\n      13: \"DÉCIMO TERCER CUATRIMESTRE\",\n      14: \"DÉCIMO CUARTO CUATRIMESTRE\",\n      15: \"DÉCIMO QUINTO CUATRIMESTRE\",\n      16: \"DÉCIMO SEXTO CUATRIMESTRE\",\n      17: \"DÉCIMO SÉPTIMO CUATRIMESTRE\",\n      18: \"DÉCIMO OCTAVO CUATRIMESTRE\",\n      19: \"PROYECTO DE GRADO\"\n    };\n    return termNames[termNumber] || `CUATRIMESTRE ${termNumber}`;\n  };\n\n  const getAllTerms = () => {\n    const termMap = new Map();\n    courses.forEach(course => {\n      if (!termMap.has(course.term)) {\n        termMap.set(course.term, {\n          term: course.term,\n          name: getTermName(course.term),\n          block: course.block,\n          credits: 0,\n          courseCount: 0\n        });\n      }\n      const termInfo = termMap.get(course.term);\n      termInfo.credits += course.credits;\n      termInfo.courseCount += 1;\n    });\n    return Array.from(termMap.values()).sort((a, b) => a.term - b.term);\n  };\n\n  return {\n    courses,\n    sections,\n    loading,\n    getCourseById,\n    getSectionsByCourse,\n    getCoursesByTerm,\n    getElectivesByType,\n    getAllTerms\n  };\n}\n","size_bytes":3023},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-schedule.ts":{"content":"import { useState, useEffect } from 'react';\nimport { Section, ScheduleConflict, CoursePlan } from '@/types';\n\nconst SCHEDULE_STORAGE_KEY = 'medicina-course-plan';\n\nexport function useSchedule() {\n  const [coursePlan, setCoursePlan] = useState<CoursePlan[]>([]);\n\n  useEffect(() => {\n    // Load from localStorage\n    const saved = localStorage.getItem(SCHEDULE_STORAGE_KEY);\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        setCoursePlan(data);\n      } catch (error) {\n        console.error('Error loading course plan:', error);\n      }\n    }\n  }, []);\n\n  const savePlan = (newPlan: CoursePlan[]) => {\n    setCoursePlan(newPlan);\n    localStorage.setItem(SCHEDULE_STORAGE_KEY, JSON.stringify(newPlan));\n  };\n\n  const addCourseToPlan = (courseId: string, plannedTerm: number, sectionId?: string, priority = 1) => {\n    const newPlan = [...coursePlan];\n    const existingIndex = newPlan.findIndex(item => item.courseId === courseId);\n    \n    if (existingIndex >= 0) {\n      newPlan[existingIndex] = { courseId, plannedTerm, sectionId, priority };\n    } else {\n      newPlan.push({ courseId, plannedTerm, sectionId, priority });\n    }\n    \n    savePlan(newPlan);\n  };\n\n  const removeCourseFromPlan = (courseId: string) => {\n    const newPlan = coursePlan.filter(item => item.courseId !== courseId);\n    savePlan(newPlan);\n  };\n\n  const updateSectionSelection = (courseId: string, sectionId: string) => {\n    const newPlan = coursePlan.map(item => \n      item.courseId === courseId \n        ? { ...item, sectionId }\n        : item\n    );\n    savePlan(newPlan);\n  };\n\n  const detectScheduleConflicts = (sections: Section[]): ScheduleConflict[] => {\n    const conflicts: ScheduleConflict[] = [];\n    const selectedSections = coursePlan\n      .filter(plan => plan.sectionId)\n      .map(plan => sections.find(section => section.id === plan.sectionId))\n      .filter(section => section !== undefined) as Section[];\n\n    for (let i = 0; i < selectedSections.length; i++) {\n      for (let j = i + 1; j < selectedSections.length; j++) {\n        const section1 = selectedSections[i];\n        const section2 = selectedSections[j];\n        \n        const conflict = findTimeConflict(section1, section2);\n        if (conflict) {\n          conflicts.push({\n            course1: section1.courseId,\n            course2: section2.courseId,\n            conflictTime: conflict\n          });\n        }\n      }\n    }\n\n    return conflicts;\n  };\n\n  const findTimeConflict = (section1: Section, section2: Section): string | null => {\n    for (const schedule1 of section1.schedule) {\n      for (const schedule2 of section2.schedule) {\n        if (schedule1.day === schedule2.day) {\n          const start1 = timeToMinutes(schedule1.startTime);\n          const end1 = timeToMinutes(schedule1.endTime);\n          const start2 = timeToMinutes(schedule2.startTime);\n          const end2 = timeToMinutes(schedule2.endTime);\n\n          if ((start1 < end2 && end1 > start2)) {\n            return `${schedule1.day} ${schedule1.startTime}-${schedule1.endTime}`;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  const timeToMinutes = (time: string): number => {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n  };\n\n  const getCoursesInPlan = (): Set<string> => {\n    return new Set(coursePlan.map(plan => plan.courseId));\n  };\n\n  const getPlannedTermCredits = (term: number, courses: any[]): number => {\n    return coursePlan\n      .filter(plan => plan.plannedTerm === term)\n      .reduce((total, plan) => {\n        const course = courses.find(c => c.id === plan.courseId);\n        return total + (course?.credits || 0);\n      }, 0);\n  };\n\n  const suggestCoursesForTerm = (\n    term: number, \n    availableCourses: any[],\n    passedCourses: Set<string>,\n    getCourseStatus: (course: any, passedCourses: Set<string>, plannedCourses?: Set<string>) => string,\n    maxCredits = 22\n  ): string[] => {\n    const currentCredits = getPlannedTermCredits(term, availableCourses);\n    const remainingCredits = maxCredits - currentCredits;\n    \n    const suggestions: string[] = [];\n    let creditsToAdd = 0;\n    \n    // Get courses already in plan to avoid duplicates\n    const plannedCourseIds = new Set(coursePlan.map(plan => plan.courseId));\n    \n    // Build corequisite clusters\n    const corequisiteClusters = buildCorequisiteClusters(availableCourses, passedCourses, plannedCourseIds);\n    \n    const usedCourseIds = new Set<string>();\n    \n    // Process clusters by priority: required term, electives, catch-up\n    const processClustersByPriority = (filterFn: (course: any) => boolean) => {\n      for (const cluster of corequisiteClusters) {\n        // Skip if any course in cluster is already used\n        if (cluster.some(courseId => usedCourseIds.has(courseId))) {\n          continue;\n        }\n        \n        const clusterCourses = cluster.map(id => availableCourses.find(c => c.id === id)).filter(Boolean);\n        if (clusterCourses.length === 0) continue;\n        \n        // Check if cluster matches filter criteria\n        if (!clusterCourses.some(filterFn)) continue;\n        \n        // Calculate total credits for the cluster\n        const clusterCredits = clusterCourses.reduce((sum, course) => sum + course.credits, 0);\n        \n        if (creditsToAdd + clusterCredits > remainingCredits) continue;\n        \n        // Check availability for the entire cluster\n        let allAvailable = false;\n        \n        if (clusterCourses.length === 1) {\n          // Single course - check normally\n          const course = clusterCourses[0];\n          allAvailable = getCourseStatus(course, passedCourses, plannedCourseIds) === 'available' &&\n                        (!course.isElective || isElectiveAvailableForTerm(course, term));\n        } else {\n          // Corequisite cluster - simulate planning them together\n          const clusterPlannedSet = new Set([...Array.from(plannedCourseIds), ...cluster]);\n          allAvailable = clusterCourses.every(course => {\n            const status = getCourseStatus(course, passedCourses, clusterPlannedSet);\n            return status === 'available' && (!course.isElective || isElectiveAvailableForTerm(course, term));\n          });\n        }\n        \n        if (allAvailable) {\n          cluster.forEach(courseId => {\n            suggestions.push(courseId);\n            usedCourseIds.add(courseId);\n          });\n          creditsToAdd += clusterCredits;\n        }\n      }\n    };\n    \n    // 1. Process required courses for the exact term\n    processClustersByPriority(course => course.term === term && !course.isElective);\n    \n    // 2. Process electives available for this term\n    processClustersByPriority(course => course.isElective && isElectiveAvailableForTerm(course, term));\n    \n    // 3. Process catch-up required courses from earlier terms\n    processClustersByPriority(course => course.term < term && !course.isElective);\n\n    return suggestions;\n  };\n\n  // Helper function to build corequisite clusters\n  const buildCorequisiteClusters = (\n    allCourses: any[], \n    passedCourses: Set<string>, \n    plannedCourseIds: Set<string>\n  ): string[][] => {\n    const clusters: string[][] = [];\n    const processedCourses = new Set<string>();\n    \n    for (const course of allCourses) {\n      if (processedCourses.has(course.id) || \n          passedCourses.has(course.id) || \n          plannedCourseIds.has(course.id)) {\n        continue;\n      }\n      \n      if (!course.corequisites || course.corequisites.length === 0) {\n        // Single course cluster\n        clusters.push([course.id]);\n        processedCourses.add(course.id);\n      } else {\n        // Build corequisite cluster\n        const cluster = new Set([course.id]);\n        const toProcess = [...course.corequisites];\n        \n        while (toProcess.length > 0) {\n          const coreqId = toProcess.shift()!;\n          if (!cluster.has(coreqId) && \n              !passedCourses.has(coreqId) && \n              !plannedCourseIds.has(coreqId)) {\n            cluster.add(coreqId);\n            \n            // Find the corequisite course and add its corequisites too\n            const coreqCourse = allCourses.find(c => c.id === coreqId);\n            if (coreqCourse && coreqCourse.corequisites) {\n              coreqCourse.corequisites.forEach((nestedCoreq: string) => {\n                if (!cluster.has(nestedCoreq)) {\n                  toProcess.push(nestedCoreq);\n                }\n              });\n            }\n          }\n        }\n        \n        const clusterArray = Array.from(cluster);\n        clusters.push(clusterArray);\n        clusterArray.forEach(id => processedCourses.add(id));\n      }\n    }\n    \n    return clusters;\n  };\n\n  // Helper function to determine if an elective is available for a specific term\n  const isElectiveAvailableForTerm = (course: any, currentTerm: number): boolean => {\n    if (!course.isElective) return false;\n    \n    // General electives are available after term 6\n    if (course.electiveType === 'general' && currentTerm >= 6) {\n      return true;\n    }\n    \n    // Professional electives for basic sciences (available after term 11)\n    if (course.electiveType === 'professional' && course.term <= 11 && currentTerm >= 11) {\n      return true;\n    }\n    \n    // Professional electives for clinical sciences (available after term 15)  \n    if (course.electiveType === 'professional' && course.term > 11 && currentTerm >= 15) {\n      return true;\n    }\n    \n    return false;\n  };\n\n  return {\n    coursePlan,\n    addCourseToPlan,\n    removeCourseFromPlan,\n    updateSectionSelection,\n    detectScheduleConflicts,\n    getCoursesInPlan,\n    getPlannedTermCredits,\n    suggestCoursesForTerm,\n    isElectiveAvailableForTerm,\n    buildCorequisiteClusters\n  };\n}\n","size_bytes":9781},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from 'react';\nimport { ProgressHeader } from '@/components/progress-header';\nimport { Navigation } from '@/components/navigation';\nimport { CourseList } from '@/components/course-list';\nimport { CourseDetail } from '@/components/course-detail';\nimport { ComprehensivePlanModal } from '@/components/comprehensive-plan-modal';\nimport { AdminPanel } from '@/components/admin-panel';\nimport { Course, FilterState } from '@/types';\n\nexport function Dashboard() {\n  const [activeView, setActiveView] = useState('courses');\n  const [selectedCourse, setSelectedCourse] = useState<Course | undefined>();\n  const [showPlanModal, setShowPlanModal] = useState(false);\n  const [filters, setFilters] = useState<FilterState>({\n    term: null,\n    status: null,\n    electivesOnly: false,\n    inPlanOnly: false,\n    searchTerm: ''\n  });\n\n  const handleCourseSelect = (course: Course) => {\n    setSelectedCourse(course);\n  };\n\n  const handleShowPlanModal = () => {\n    setShowPlanModal(true);\n  };\n\n  const handleClosePlanModal = () => {\n    setShowPlanModal(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground font-sans antialiased\">\n      <ProgressHeader />\n      \n      <div className=\"flex min-h-[calc(100vh-80px)]\">\n        <Navigation \n          filters={filters}\n          onFiltersChange={setFilters}\n          activeView={activeView}\n          onViewChange={setActiveView}\n          onShowPlanModal={handleShowPlanModal}\n        />\n        \n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"h-full flex\">\n            {/* Course List - 2/3 width */}\n            <div className=\"w-2/3 border-r border-border\">\n              <CourseList \n                filters={filters}\n                onCourseSelect={handleCourseSelect}\n                selectedCourse={selectedCourse}\n                onShowPlanModal={handleShowPlanModal}\n              />\n            </div>\n            \n            {/* Course Detail Sidebar - 1/3 width */}\n            <div className=\"w-1/3 bg-background sticky top-0 h-screen overflow-y-auto\">\n              {selectedCourse ? (\n                <CourseDetail course={selectedCourse} />\n              ) : (\n                <div className=\"p-6 h-full flex items-center justify-center text-center\">\n                  <div className=\"text-muted-foreground\">\n                    <div className=\"text-lg font-medium mb-2\">Selecciona una materia</div>\n                    <p className=\"text-sm\">Haz clic en cualquier materia para ver sus detalles</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <ComprehensivePlanModal \n        open={showPlanModal} \n        onClose={handleClosePlanModal} \n      />\n      \n      <AdminPanel />\n    </div>\n  );\n}\n","size_bytes":2821},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface Course {\n  id: string;\n  name: string;\n  credits: number;\n  theoreticalHours: number;\n  practicalHours: number;\n  term: number;\n  block: string;\n  prerequisites: string[];\n  corequisites: string[];\n  isElective: boolean;\n  electiveType: string | null;\n  description: string;\n}\n\nexport interface Section {\n  id: string;\n  courseId: string;\n  sectionNumber: string;\n  instructor: string;\n  room: string;\n  crn: string;\n  schedule: {\n    day: string;\n    startTime: string;\n    endTime: string;\n  }[];\n  maxCapacity: number;\n  currentEnrollment: number;\n}\n\nexport interface StudentProgress {\n  courseId: string;\n  status: 'passed' | 'in_progress' | 'planned';\n  grade?: string;\n  completedAt?: string;\n  sectionId?: string;\n}\n\nexport interface CoursePlan {\n  courseId: string;\n  plannedTerm: number;\n  sectionId?: string;\n  priority: number;\n}\n\nexport type CourseStatus = 'available' | 'blocked' | 'passed';\n\nexport interface ScheduleConflict {\n  course1: string;\n  course2: string;\n  conflictTime: string;\n}\n\nexport interface FilterState {\n  term: number | null;\n  status: CourseStatus | null;\n  electivesOnly: boolean;\n  inPlanOnly: boolean;\n  searchTerm: string;\n}\n\nexport interface TermInfo {\n  term: number;\n  name: string;\n  block: string;\n  credits: number;\n  courseCount: number;\n}\n","size_bytes":1304},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/contexts/student-progress-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, useMemo, ReactNode } from 'react';\nimport { StudentProgress, CourseStatus, Course } from '@/types';\n\nconst STORAGE_KEY = 'medicina-student-progress';\n\ninterface StudentProgressContextType {\n  progress: Map<string, StudentProgress>;\n  passedCourses: Set<string>;\n  plannedCourses: Set<string>;\n  markCoursePassed: (courseId: string, grade?: string) => void;\n  markCourseInProgress: (courseId: string, sectionId?: string) => void;\n  markCoursePlanned: (courseId: string, sectionId?: string) => void;\n  removeCourseProgress: (courseId: string) => void;\n  getCourseStatus: (course: Course, passedCourses: Set<string>, plannedCourses?: Set<string>) => CourseStatus;\n  getPassedCourses: () => Set<string>;\n  getPlannedCourses: () => Set<string>;\n  getTotalCredits: (courses: Course[]) => { passed: number; planned: number; total: number };\n  calculateGPA: () => number;\n  updateCourses: (courses: Course[]) => void;\n}\n\nconst StudentProgressContext = createContext<StudentProgressContextType | undefined>(undefined);\n\nexport function useStudentProgress() {\n  const context = useContext(StudentProgressContext);\n  if (context === undefined) {\n    throw new Error('useStudentProgress must be used within a StudentProgressProvider');\n  }\n  return context;\n}\n\ninterface StudentProgressProviderProps {\n  children: ReactNode;\n}\n\nexport function StudentProgressProvider({ children }: StudentProgressProviderProps) {\n  const [progress, setProgress] = useState<Map<string, StudentProgress>>(new Map());\n  const [allCourses, setAllCourses] = useState<Course[]>([]);\n\n  useEffect(() => {\n    // Load from localStorage\n    const saved = localStorage.getItem(STORAGE_KEY);\n    if (saved) {\n      try {\n        const data = JSON.parse(saved);\n        const progressMap = new Map(Object.entries(data) as [string, StudentProgress][]);\n        setProgress(progressMap);\n      } catch (error) {\n        console.error('Error loading progress:', error);\n      }\n    }\n  }, []);\n\n  const saveProgress = (newProgress: Map<string, StudentProgress>) => {\n    console.log('[saveProgress] Updating progress state, size:', newProgress.size);\n    setProgress(newProgress);\n    const data = Object.fromEntries(newProgress);\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n    console.log('[saveProgress] localStorage updated:', Object.keys(data));\n  };\n\n  const markCoursePassed = (courseId: string, grade?: string) => {\n    console.log('[markCoursePassed] Called for:', courseId);\n    \n    // Validate that grade is C or above (if provided)\n    if (grade && !['A', 'B', 'C'].includes(grade)) {\n      console.warn('[markCoursePassed] Grade must be C or above to pass. Received:', grade);\n      return;\n    }\n    \n    const newProgress = new Map(progress);\n    newProgress.set(courseId, {\n      courseId,\n      status: 'passed',\n      grade,\n      completedAt: new Date().toISOString()\n    });\n    console.log('[markCoursePassed] New progress size:', newProgress.size);\n    saveProgress(newProgress);\n  };\n\n  const markCourseInProgress = (courseId: string, sectionId?: string) => {\n    const newProgress = new Map(progress);\n    newProgress.set(courseId, {\n      courseId,\n      status: 'in_progress',\n      sectionId\n    });\n    saveProgress(newProgress);\n  };\n\n  const markCoursePlanned = (courseId: string, sectionId?: string) => {\n    const newProgress = new Map(progress);\n    newProgress.set(courseId, {\n      courseId,\n      status: 'planned',\n      sectionId\n    });\n    saveProgress(newProgress);\n  };\n\n  const removeCourseProgress = (courseId: string) => {\n    const newProgress = new Map(progress);\n    newProgress.delete(courseId);\n    saveProgress(newProgress);\n  };\n\n  const getCourseStatus = (course: Course, passedCourses: Set<string>, plannedCourses?: Set<string>): CourseStatus => {\n    // Use the passed Set directly instead of accessing progress Map\n    if (passedCourses.has(course.id)) {\n      return 'passed';\n    }\n\n    // Check prerequisites - if prerequisites array is empty, course is not blocked by prereqs\n    if (course.prerequisites.length > 0) {\n      for (const prereq of course.prerequisites) {\n        if (!passedCourses.has(prereq)) {\n          return 'blocked';\n        }\n      }\n    }\n\n    // Check corequisites - allow if any corequisite is passed, planned, or being planned together\n    // OR if the course has no prerequisites (corequisites can be taken together)\n    if (course.corequisites.length > 0) {\n      const hasPassedCoreq = course.corequisites.some(coreq => passedCourses.has(coreq));\n      const hasPlannedCoreq = course.corequisites.some(coreq => {\n        const coreqProgress = progress.get(coreq);\n        return coreqProgress?.status === 'planned' || coreqProgress?.status === 'in_progress';\n      });\n      const hasSamePlanCoreq = plannedCourses ? course.corequisites.some(coreq => plannedCourses.has(coreq)) : false;\n      \n      // Allow if ANY corequisite condition is met OR if course has no prerequisites\n      // (courses with only corequisites can be taken together)\n      if (!hasPassedCoreq && !hasPlannedCoreq && !hasSamePlanCoreq && course.prerequisites.length > 0) {\n        return 'blocked';\n      }\n    }\n\n    // Check elective availability based on student's academic progress\n    if (course.isElective) {\n      const studentProgress = calculateStudentTermProgress(passedCourses, plannedCourses || new Set());\n      \n      // General electives available when student has reached term 6\n      if (course.electiveType === 'general' && studentProgress < 6) {\n        return 'blocked';\n      }\n      \n      // Professional electives for basic sciences available when reached term 11\n      if (course.electiveType === 'professional' && course.term <= 11 && studentProgress < 11) {\n        return 'blocked';\n      }\n      \n      // Professional electives for clinical sciences available when reached term 15\n      if (course.electiveType === 'professional' && course.term > 11 && studentProgress < 15) {\n        return 'blocked';\n      }\n    }\n\n    return 'available';\n  };\n\n  // Helper function to determine student's current term progress based on passed and planned courses\n  const calculateStudentTermProgress = (passedCourses: Set<string>, plannedCourses: Set<string>): number => {\n    if (allCourses.length === 0) return 0;\n    \n    // Combine passed and planned courses to determine current academic standing\n    const completedOrPlanned = new Set([...Array.from(passedCourses), ...Array.from(plannedCourses)]);\n    let highestTerm = 0;\n    \n    // Find highest term where student has completed or is planning significant progress\n    for (let term = 1; term <= 18; term++) {\n      const termRequiredCourses = allCourses.filter(course => \n        course.term === term && !course.isElective\n      );\n      \n      const completedTermCourses = termRequiredCourses.filter(course => \n        completedOrPlanned.has(course.id)\n      );\n      \n      // Consider term \"reached\" if student has 50% or more courses completed/planned\n      if (termRequiredCourses.length > 0 && \n          completedTermCourses.length / termRequiredCourses.length >= 0.5) {\n        highestTerm = term;\n      }\n    }\n    \n    return highestTerm;\n  };\n\n  const getPassedCourses = (): Set<string> => {\n    const passed = new Set<string>();\n    progress.forEach((prog, courseId) => {\n      if (prog.status === 'passed') {\n        passed.add(courseId);\n      }\n    });\n    return passed;\n  };\n\n  const getPlannedCourses = (): Set<string> => {\n    const planned = new Set<string>();\n    progress.forEach((prog, courseId) => {\n      if (prog.status === 'planned' || prog.status === 'in_progress') {\n        planned.add(courseId);\n      }\n    });\n    return planned;\n  };\n\n  const getTotalCredits = (courses: Course[]): { passed: number; planned: number; total: number } => {\n    let passedCredits = 0;\n    let plannedCredits = 0;\n    let totalCredits = 0;\n\n    courses.forEach(course => {\n      totalCredits += course.credits;\n      const courseProgress = progress.get(course.id);\n      \n      if (courseProgress?.status === 'passed') {\n        passedCredits += course.credits;\n      } else if (courseProgress?.status === 'planned' || courseProgress?.status === 'in_progress') {\n        plannedCredits += course.credits;\n      }\n    });\n\n    return { passed: passedCredits, planned: plannedCredits, total: totalCredits };\n  };\n\n  const calculateGPA = (): number => {\n    let totalPoints = 0;\n    let totalCredits = 0;\n\n    progress.forEach((prog) => {\n      if (prog.status === 'passed' && prog.grade) {\n        const gradePoints = getGradePoints(prog.grade);\n        if (gradePoints !== null) {\n          totalPoints += gradePoints * getCourseCredits(prog.courseId);\n          totalCredits += getCourseCredits(prog.courseId);\n        }\n      }\n    });\n\n    return totalCredits > 0 ? totalPoints / totalCredits : 0;\n  };\n\n  // Update courses when needed (to be called from components that have course data)\n  const updateCourses = (courses: Course[]) => {\n    setAllCourses(courses);\n  };\n\n  const getCourseCredits = (courseId: string): number => {\n    const course = allCourses.find(c => c.id === courseId);\n    return course?.credits || 3; // fallback to 3 if course not found\n  };\n\n  const getGradePoints = (grade: string): number | null => {\n    const gradeMap: { [key: string]: number } = {\n      'A': 4.0,\n      'B': 3.0,\n      'C': 2.0,\n      'D': 1.0,\n      'F': 0.0\n    };\n    return gradeMap[grade] ?? null;\n  };\n\n  // Reactive values that trigger re-renders when progress changes\n  const passedCourses = useMemo(() => {\n    console.log('[passedCourses useMemo] Recalculating with progress size:', progress.size);\n    const passed = new Set<string>();\n    progress.forEach((prog, courseId) => {\n      if (prog.status === 'passed') {\n        passed.add(courseId);\n      }\n    });\n    console.log('[passedCourses useMemo] Passed courses:', Array.from(passed));\n    return passed;\n  }, [progress]);\n\n  const plannedCourses = useMemo(() => {\n    const planned = new Set<string>();\n    progress.forEach((prog, courseId) => {\n      if (prog.status === 'planned' || prog.status === 'in_progress') {\n        planned.add(courseId);\n      }\n    });\n    return planned;\n  }, [progress]);\n\n  const value = {\n    progress,\n    passedCourses,\n    plannedCourses,\n    markCoursePassed,\n    markCourseInProgress,\n    markCoursePlanned,\n    removeCourseProgress,\n    getCourseStatus,\n    getPassedCourses,\n    getPlannedCourses,\n    getTotalCredits,\n    calculateGPA,\n    updateCourses\n  };\n\n  return (\n    <StudentProgressContext.Provider value={value}>\n      {children}\n    </StudentProgressContext.Provider>\n  );\n}","size_bytes":10682},"client/src/components/grade-input-dialog.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\n\ninterface GradeInputDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: (grade: string) => void;\n  courseName: string;\n}\n\nconst grades = [\n  { value: 'A', label: 'A (4.0)' },\n  { value: 'B', label: 'B (3.0)' },\n  { value: 'C', label: 'C (2.0)' },\n  { value: 'D', label: 'D (1.0)' },\n  { value: 'F', label: 'F (0.0)' }\n];\n\nexport function GradeInputDialog({ open, onClose, onConfirm, courseName }: GradeInputDialogProps) {\n  const [selectedGrade, setSelectedGrade] = useState<string>('');\n\n  const handleConfirm = () => {\n    if (selectedGrade) {\n      onConfirm(selectedGrade);\n      setSelectedGrade('');\n      onClose();\n    }\n  };\n\n  const handleCancel = () => {\n    setSelectedGrade('');\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ingresa la calificacion para {courseName}</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"grade-select\">Calificación</Label>\n            <Select value={selectedGrade} onValueChange={setSelectedGrade}>\n              <SelectTrigger id=\"grade-select\" data-testid=\"grade-select\">\n                <SelectValue placeholder=\"Selecciona una calificación\" />\n              </SelectTrigger>\n              <SelectContent>\n                {grades.map((grade) => (\n                  <SelectItem key={grade.value} value={grade.value} data-testid={`grade-${grade.value}`}>\n                    {grade.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={handleCancel} data-testid=\"grade-cancel\">\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleConfirm} \n            disabled={!selectedGrade}\n            data-testid=\"grade-confirm\"\n          >\n            Marcar como Aprobada\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2474},"client/src/utils/elective-rules.ts":{"content":"import { Course } from '@/types';\n\nexport interface ElectiveAvailabilityContext {\n  passedCourses: Set<string>;\n  plannedCourses?: Set<string>;\n  currentTerm: number;\n}\n\n/**\n * Centralized elective availability rules\n */\nexport class ElectiveRules {\n  /**\n   * Check if an elective is available based on student progress and term\n   */\n  static isElectiveAvailable(course: Course, context: ElectiveAvailabilityContext): boolean {\n    if (!course.isElective) return false;\n\n    const { passedCourses, plannedCourses = new Set(), currentTerm } = context;\n    const allPlannedCourses = new Set([...Array.from(passedCourses), ...Array.from(plannedCourses)]);\n\n    // Check term-based availability\n    if (!this.isElectiveAvailableForTerm(course, currentTerm)) {\n      return false;\n    }\n\n    // Check progress-based availability (75% requirement)\n    return this.hasProgressForElectiveType(course.electiveType || 'general', allPlannedCourses);\n  }\n\n  /**\n   * Check if an elective is available for a specific term based on curriculum structure\n   */\n  static isElectiveAvailableForTerm(course: Course, currentTerm: number): boolean {\n    if (!course.isElective) return false;\n\n    if (course.electiveType === 'general') {\n      // General electives available from term 7 onwards\n      return currentTerm >= 7;\n    } else if (course.electiveType === 'professional') {\n      // Professional electives based on their base term\n      if (course.term <= 11) {\n        // Basic Sciences professional electives - available from term 12\n        return currentTerm >= 12;\n      } else {\n        // Clinical professional electives - available from term 16\n        return currentTerm >= 16;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check if student has enough progress for the elective type\n   */\n  private static hasProgressForElectiveType(electiveType: string, completedCourses: Set<string>): boolean {\n    if (electiveType === 'general') {\n      // General electives: Need 75% of terms 1-6 basic courses\n      return this.calculateTermProgress(completedCourses, [1, 2, 3, 4, 5, 6]) >= 0.75;\n    } else if (electiveType === 'professional') {\n      // Professional electives: Need 75% of relevant block\n      // This is a simplified calculation - in practice you'd want more specific rules\n      return this.calculateCurrentTermProgress(completedCourses) >= 0.75;\n    }\n\n    return false;\n  }\n\n  /**\n   * Calculate progress for specific terms\n   */\n  private static calculateTermProgress(completedCourses: Set<string>, terms: number[]): number {\n    // This is a simplified implementation\n    // In practice, you'd load actual course data and calculate based on required courses for those terms\n    const requiredCoursesInTerms = terms.length * 5; // Assume ~5 courses per term\n    const completedCount = Array.from(completedCourses).length;\n    return Math.min(completedCount / requiredCoursesInTerms, 1);\n  }\n\n  /**\n   * Calculate overall current term progress\n   */\n  private static calculateCurrentTermProgress(completedCourses: Set<string>): number {\n    // Simplified calculation based on total completed courses\n    const totalRequiredCourses = 180; // Total credits / average credits per course\n    const completedCount = Array.from(completedCourses).length;\n    return Math.min(completedCount / totalRequiredCourses, 1);\n  }\n}","size_bytes":3330},"client/src/components/comprehensive-plan-modal.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { AlertTriangle, Check, X, Save, RotateCcw, FolderOpen, ArrowLeft, Edit } from 'lucide-react';\nimport { Course } from '@/types';\nimport { useCourseData } from '@/hooks/use-course-data';\nimport { useStudentProgress } from '@/contexts/student-progress-context';\nimport { processSectionsData, hasScheduleConflict, formatScheduleDisplay, ProcessedSection, ProcessedCourse } from '@/utils/sections-processor';\nimport sectionsData from '@/data/sections-merged.json';\n\ninterface ComprehensivePlanModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\ninterface SelectedSection {\n  courseId: string;\n  sectionCrn: string;\n  section: ProcessedSection;\n}\n\nconst processedSections = processSectionsData(sectionsData as any);\n\n// Helper function to format CRN with hyphens (e.g., MED100001 -> MED-100-001)\nconst formatCRN = (crn: string): string => {\n  // Match pattern: 3 letters + 3 digits + 3 digits\n  const match = crn.match(/^([A-Z]{3})(\\d{3})(\\d{3})$/);\n  if (match) {\n    return `${match[1]}-${match[2]}-${match[3]}`;\n  }\n  return crn; // Return as-is if pattern doesn't match\n};\n\nexport function ComprehensivePlanModal({ open, onClose }: ComprehensivePlanModalProps) {\n  const { courses, getAllTerms } = useCourseData();\n  const { getCourseStatus, getPassedCourses } = useStudentProgress();\n  \n  const [selectedSections, setSelectedSections] = useState<SelectedSection[]>([]);\n  const [conflicts, setConflicts] = useState<string[]>([]);\n  const [loadSavedPlan, setLoadSavedPlan] = useState(false);\n  const [viewMode, setViewMode] = useState<'plan' | 'saved'>('plan'); // New state for view mode\n  const passedCourses = getPassedCourses();\n\n  // Load saved plan on mount if requested\n  useEffect(() => {\n    if (open && loadSavedPlan) {\n      const savedPlan = localStorage.getItem('savedCoursePlan');\n      if (savedPlan) {\n        try {\n          const planData = JSON.parse(savedPlan);\n          setSelectedSections(planData.selectedSections || []);\n        } catch (error) {\n          console.error('Error loading saved plan:', error);\n        }\n      }\n      setLoadSavedPlan(false);\n    }\n  }, [open, loadSavedPlan]);\n\n  // Reset view mode when modal closes\n  useEffect(() => {\n    if (!open) {\n      setViewMode('plan');\n    }\n  }, [open]);\n\n  // Get term information\n  const terms = getAllTerms();\n\n  // Group courses by term and get available courses\n  const coursesByTerm = useMemo(() => {\n    const grouped = new Map<number, Course[]>();\n    \n    courses.forEach(course => {\n      const status = getCourseStatus(course, passedCourses);\n      \n      // Only show available courses (not passed or blocked)\n      if (status === 'available') {\n        if (!grouped.has(course.term)) {\n          grouped.set(course.term, []);\n        }\n        grouped.get(course.term)!.push(course);\n      }\n    });\n    \n    // Convert to array and sort by term\n    return Array.from(grouped.entries())\n      .sort(([a], [b]) => a - b)\n      .map(([term, courses]) => ({\n        term,\n        termInfo: terms.find((t: any) => t.term === term),\n        courses: courses.sort((a, b) => a.name.localeCompare(b.name))\n      }));\n  }, [courses, terms, passedCourses, getCourseStatus]);\n\n  // Get sections for a course by matching course name\n  const getSectionsForCourse = (courseName: string): ProcessedSection[] => {\n    const courseData = processedSections.courses.find(c => \n      c.name === courseName || c.name.toLowerCase() === courseName.toLowerCase()\n    );\n    return courseData?.sections.filter(section => !section.closed) || [];\n  };\n\n  // Calculate total credits\n  const totalCredits = selectedSections.reduce((sum, selection) => {\n    const course = courses.find(c => c.id === selection.courseId);\n    return sum + (course?.credits || 0);\n  }, 0);\n\n  // Check for schedule conflicts\n  useEffect(() => {\n    const conflictMessages: string[] = [];\n    \n    for (let i = 0; i < selectedSections.length; i++) {\n      for (let j = i + 1; j < selectedSections.length; j++) {\n        const section1 = selectedSections[i];\n        const section2 = selectedSections[j];\n        \n        if (hasScheduleConflict(section1.section, section2.section)) {\n          const course1 = courses.find(c => c.id === section1.courseId);\n          const course2 = courses.find(c => c.id === section2.courseId);\n          \n          if (course1 && course2) {\n            conflictMessages.push(\n              `Conflicto de horario: ${course1.name} y ${course2.name}`\n            );\n          }\n        }\n      }\n    }\n    \n    setConflicts(conflictMessages);\n  }, [selectedSections, courses]);\n\n  const handleSectionSelect = (courseId: string, sectionCrn: string) => {\n    const course = courses.find(c => c.id === courseId);\n    if (!course) return;\n    \n    const sections = getSectionsForCourse(course.name);\n    const section = sections.find(s => s.crn === sectionCrn);\n    if (!section) return;\n\n    setSelectedSections(prev => {\n      // Remove existing selection for this course\n      const filtered = prev.filter(sel => sel.courseId !== courseId);\n      \n      // Add new selection\n      return [...filtered, { courseId, sectionCrn, section }];\n    });\n  };\n\n  const handleRemoveSelection = (courseId: string) => {\n    setSelectedSections(prev => prev.filter(sel => sel.courseId !== courseId));\n  };\n\n  const handleSavePlan = () => {\n    if (conflicts.length > 0) {\n      alert('⚠️ No se puede guardar el plan debido a conflictos de horario.\\n\\nPor favor resuelve los conflictos primero.');\n      return;\n    }\n    \n    if (totalCredits > 31) {\n      alert('⚠️ No se puede guardar el plan.\\n\\nEl límite de créditos es 31.');\n      return;\n    }\n    \n    // Save to localStorage\n    const planData = {\n      selectedSections,\n      totalCredits,\n      savedAt: new Date().toISOString()\n    };\n    localStorage.setItem('savedCoursePlan', JSON.stringify(planData));\n    \n    console.log('Saving plan:', selectedSections);\n    alert('✅ Plan guardado exitosamente!');\n    onClose();\n  };\n\n  const handleClearPlan = () => {\n    setSelectedSections([]);\n  };\n\n  const handleLoadSavedPlan = () => {\n    const savedPlan = localStorage.getItem('savedCoursePlan');\n    if (savedPlan) {\n      try {\n        const planData = JSON.parse(savedPlan);\n        setSelectedSections(planData.selectedSections || []);\n        setViewMode('saved'); // Switch to saved plan view\n      } catch (error) {\n        console.error('Error loading saved plan:', error);\n        alert('Error al cargar el plan guardado.');\n      }\n    } else {\n      alert('No hay plan guardado disponible.');\n    }\n  };\n\n  const handleBackToPlan = () => {\n    setViewMode('plan');\n  };\n\n  const canSave = conflicts.length === 0 && totalCredits <= 31 && selectedSections.length > 0;\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[95vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">\n            {viewMode === 'saved' ? 'Plan Guardado' : 'Mi Plan de Estudios Completo'}\n          </DialogTitle>\n          <div className=\"flex items-center justify-between mt-4 p-4 bg-muted rounded-lg\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"text-sm\">\n                <span className=\"font-medium\">Créditos Seleccionados:</span>\n                <span className={`ml-2 font-bold ${totalCredits > 31 ? 'text-destructive' : 'text-foreground'}`}>\n                  {totalCredits} / 31\n                </span>\n              </div>\n              <div className=\"text-sm\">\n                <span className=\"font-medium\">Materias Seleccionadas:</span>\n                <span className=\"ml-2 font-bold\">{selectedSections.length}</span>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              {viewMode === 'saved' ? (\n                <>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleBackToPlan}\n                    data-testid=\"button-back-to-plan\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Volver a Todas las Materias\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setViewMode('plan')}\n                    data-testid=\"button-edit-schedule\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Editar Horario\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleLoadSavedPlan}\n                    data-testid=\"button-load-saved-plan\"\n                  >\n                    <FolderOpen className=\"w-4 h-4 mr-2\" />\n                    Ver Plan Guardado\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={handleClearPlan}\n                    disabled={selectedSections.length === 0}\n                    data-testid=\"button-clear-plan\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Limpiar\n                  </Button>\n                  <Button \n                    onClick={handleSavePlan} \n                    size=\"sm\"\n                    disabled={!canSave}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                    data-testid=\"button-save-plan\"\n                  >\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Guardar Plan\n                  </Button>\n                </>\n              )}\n            </div>\n          </div>\n          \n          {/* Conflicts Alert */}\n          {conflicts.length > 0 && (\n            <Alert className=\"border-destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"font-medium text-destructive mb-2\">Conflictos de Horario:</div>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  {conflicts.map((conflict, index) => (\n                    <li key={index} className=\"text-sm\">{conflict}</li>\n                  ))}\n                </ul>\n              </AlertDescription>\n            </Alert>\n          )}\n          \n          {/* Credit Limit Alert */}\n          {totalCredits > 31 && (\n            <Alert className=\"border-destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-destructive\">\n                Has excedido el límite de 31 créditos. Reduce la selección para continuar.\n              </AlertDescription>\n            </Alert>\n          )}\n        </DialogHeader>\n        \n        <ScrollArea className=\"flex-1 max-h-[65vh]\">\n          <div className=\"p-6 space-y-6\">\n            {viewMode === 'saved' ? (\n              // Saved Plan View - Only show selected subjects\n              selectedSections.length > 0 ? (\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg\">Materias y Secciones Seleccionadas</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-4\">\n                      {selectedSections.map(selection => {\n                        const course = courses.find(c => c.id === selection.courseId);\n                        if (!course) return null;\n                        \n                        return (\n                          <div key={selection.courseId} className=\"border rounded-lg p-4 bg-muted/50\" data-testid={`saved-course-${selection.courseId}`}>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1\">\n                                  <h4 className=\"font-medium text-base\">\n                                    {course.id} - {course.name}\n                                  </h4>\n                                  <div className=\"text-sm text-muted-foreground mt-1\">\n                                    {course.credits} créditos • HT {course.theoreticalHours} • HP {course.practicalHours}\n                                  </div>\n                                </div>\n                                {course.isElective && (\n                                  <Badge className=\"bg-indigo-500/20 text-indigo-300 border-indigo-500/30 text-xs\">\n                                    Electiva • {course.electiveType === 'general' ? 'General' : 'Profesionalizante'}\n                                  </Badge>\n                                )}\n                              </div>\n                              <Separator />\n                              <div className=\"bg-background rounded-md p-3\">\n                                <div className=\"font-medium text-sm mb-1\">{formatCRN(selection.sectionCrn)} • {course.name}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatScheduleDisplay(selection.section)} • {selection.section.room}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                <Card>\n                  <CardContent className=\"p-8 text-center text-muted-foreground\">\n                    No hay materias seleccionadas en el plan guardado.\n                  </CardContent>\n                </Card>\n              )\n            ) : (\n              // Full Plan View - Show all available courses\n              coursesByTerm.map(({ term, termInfo, courses: termCourses }) => (\n                <Card key={term}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg flex items-center gap-3\">\n                      <span className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold text-sm\">\n                        {term}\n                      </span>\n                      <div>\n                        <div>{termInfo?.name || `Semestre ${term}`}</div>\n                        <div className=\"text-sm font-normal text-muted-foreground\">\n                          {termInfo?.block} • {termCourses.length} materias disponibles\n                        </div>\n                      </div>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {termCourses.map(course => {\n                        const sections = getSectionsForCourse(course.name);\n                        const selectedSection = selectedSections.find(sel => sel.courseId === course.id);\n                        const isSelected = !!selectedSection;\n                        \n                        return (\n                          <div key={course.id} className=\"border rounded-lg p-4 space-y-3\" data-testid={`course-card-${course.id}`}>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-start justify-between\">\n                                <div className=\"flex-1 min-w-0\">\n                                  <h4 className=\"font-medium text-sm leading-tight break-words\">\n                                    {course.id} - {course.name}\n                                  </h4>\n                                  <div className=\"text-xs text-muted-foreground mt-1\">\n                                    {course.credits} créditos • HT {course.theoreticalHours} • HP {course.practicalHours}\n                                  </div>\n                                </div>\n                                {isSelected && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    className=\"ml-2 h-6 w-6 p-0\"\n                                    onClick={() => handleRemoveSelection(course.id)}\n                                    data-testid={`button-remove-${course.id}`}\n                                  >\n                                    <X className=\"w-3 h-3\" />\n                                  </Button>\n                                )}\n                              </div>\n                              \n                              {course.isElective && (\n                                <Badge className=\"bg-indigo-500/20 text-indigo-300 border-indigo-500/30 text-xs\">\n                                  Electiva • {course.electiveType === 'general' ? 'General' : 'Profesionalizante'}\n                                </Badge>\n                              )}\n                            </div>\n                            \n                            {sections.length > 0 ? (\n                              <div>\n                                <label className=\"text-xs font-medium text-muted-foreground\">\n                                  Seleccionar Sección:\n                                </label>\n                                <Select \n                                  value={selectedSection?.sectionCrn || \"\"} \n                                  onValueChange={(sectionCrn) => handleSectionSelect(course.id, sectionCrn)}\n                                >\n                                  <SelectTrigger className=\"mt-1 h-8 text-xs\" data-testid={`select-section-${course.id}`}>\n                                    <SelectValue placeholder=\"Elige una sección...\" />\n                                  </SelectTrigger>\n                                  <SelectContent className=\"max-h-[400px]\">\n                                    {sections.map(section => (\n                                      <SelectItem key={section.crn} value={section.crn} data-testid={`section-option-${section.crn}`}>\n                                        <div className=\"max-w-full py-1\">\n                                          <div className=\"font-medium truncate\">\n                                            {formatCRN(section.crn)} • {course.name}\n                                          </div>\n                                          <div className=\"text-xs text-muted-foreground\">\n                                            {formatScheduleDisplay(section)} • {section.room}\n                                          </div>\n                                        </div>\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                            ) : (\n                              <div className=\"text-xs text-muted-foreground bg-muted p-2 rounded\">\n                                No hay secciones disponibles\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20247},"client/src/utils/sections-processor.ts":{"content":"// Utility to process and fix the sections data\nexport interface ProcessedSection {\n  crn: string;\n  label: string;\n  room: string;\n  career: string;\n  closed: boolean;\n  slots: TimeSlot[];\n}\n\nexport interface TimeSlot {\n  day: string;\n  start: number;\n  end: number;\n}\n\nexport interface ProcessedCourse {\n  name: string;\n  id: string | null;\n  sections: ProcessedSection[];\n}\n\nexport interface SectionsData {\n  courses: ProcessedCourse[];\n}\n\n// Convert minutes since midnight to HH:MM format\nexport function minutesToTime(minutes: number): string {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n}\n\n// Convert HH:MM format to minutes since midnight\nexport function timeToMinutes(time: string): number {\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n}\n\n// Parse time from label (e.g., \"J7:00 a 10:00 am\", \"MI9:15 a 12:15 am\")\nexport function parseTimeFromLabel(label: string): { start: number; end: number; days: string[] } | null {\n  try {\n    // Extract day abbreviations and time range\n    const dayMatch = label.match(/^([LMIJVS]+)/);\n    if (!dayMatch) return null;\n    \n    const daysStr = dayMatch[1];\n    const days = [];\n    \n    // Parse individual day codes\n    let i = 0;\n    while (i < daysStr.length) {\n      if (i < daysStr.length - 1 && daysStr.substr(i, 2) === 'MI') {\n        days.push('MI');\n        i += 2;\n      } else if (i < daysStr.length - 1 && daysStr.substr(i, 2) === 'MA') {\n        days.push('MA');\n        i += 2;\n      } else {\n        days.push(daysStr[i]);\n        i += 1;\n      }\n    }\n    \n    // Extract time range (e.g., \"7:00 a 10:00 am\")\n    const timeMatch = label.match(/(\\d+):(\\d+)\\s+a\\s+(\\d+):(\\d+)\\s+(am|pm)/i);\n    if (!timeMatch) return null;\n    \n    const [, startHour, startMin, endHour, endMin, period] = timeMatch;\n    \n    let startMinutes = parseInt(startHour) * 60 + parseInt(startMin);\n    let endMinutes = parseInt(endHour) * 60 + parseInt(endMin);\n    \n    // Convert to 24-hour format\n    const isAM = period.toLowerCase() === 'am';\n    const isPM = period.toLowerCase() === 'pm';\n    \n    if (isPM && parseInt(startHour) !== 12) {\n      startMinutes += 12 * 60;\n    }\n    if (isPM && parseInt(endHour) !== 12) {\n      endMinutes += 12 * 60;\n    }\n    if (isAM && parseInt(startHour) === 12) {\n      startMinutes -= 12 * 60;\n    }\n    if (isAM && parseInt(endHour) === 12) {\n      // Handle \"12:xx am\" edge case - if start > end, treat 12:xx am as 12:xx PM (noon)\n      endMinutes -= 12 * 60;\n      if (endMinutes < 0) endMinutes = 0;\n    }\n    \n    // Fix: if end < start and end hour was 12 with AM, it likely means PM (noon)\n    if (endMinutes < startMinutes && parseInt(endHour) === 12 && isAM) {\n      endMinutes += 12 * 60; // Convert to PM\n    }\n    \n    return { start: startMinutes, end: endMinutes, days };\n  } catch (error) {\n    console.warn('Failed to parse time from label:', label, error);\n    return null;\n  }\n}\n\n// Fix slot timing issues in the sections data\nexport function fixSectionSlots(section: ProcessedSection): ProcessedSection {\n  const fixed = { ...section };\n  \n  // Try to fix slots using the label\n  const parsedTime = parseTimeFromLabel(section.label);\n  if (parsedTime) {\n    const { start, end, days } = parsedTime;\n    \n    // Day offsets for calculating absolute time\n    const dayOffsets: Record<string, number> = {\n      'L': 0,        // Monday\n      'MA': 1440,    // Tuesday\n      'MI': 2880,    // Wednesday\n      'J': 4320,     // Thursday\n      'V': 5760,     // Friday\n      'S': 7200      // Saturday\n    };\n    \n    // Create corrected slots with day offsets\n    fixed.slots = days.map(day => ({\n      day,\n      start: (dayOffsets[day] || 0) + start,\n      end: (dayOffsets[day] || 0) + end\n    }));\n  } else {\n    // Fix existing slots where end < start (likely PM/AM confusion)\n    fixed.slots = section.slots.map(slot => {\n      // Extract day offset\n      const dayOffsets: Record<string, number> = {\n        'L': 0,\n        'MA': 1440,\n        'MI': 2880,\n        'J': 4320,\n        'V': 5760,\n        'S': 7200\n      };\n      \n      const dayOffset = dayOffsets[slot.day] || 0;\n      const startTime = slot.start - dayOffset;\n      const endTime = slot.end - dayOffset;\n      \n      if (endTime < startTime) {\n        // If end is less than start, likely an AM/PM issue\n        // Add 12 hours (720 minutes) to the end time\n        return { ...slot, end: dayOffset + endTime + 720 };\n      }\n      return slot;\n    });\n  }\n  \n  return fixed;\n}\n\n// Process the entire sections data\nexport function processSectionsData(rawData: SectionsData): SectionsData {\n  return {\n    courses: rawData.courses.map(course => ({\n      ...course,\n      sections: course.sections.map(fixSectionSlots)\n    }))\n  };\n}\n\n// Check for schedule conflicts between two sections\nexport function hasScheduleConflict(section1: ProcessedSection, section2: ProcessedSection): boolean {\n  for (const slot1 of section1.slots) {\n    for (const slot2 of section2.slots) {\n      if (slot1.day === slot2.day) {\n        // Check if times overlap\n        if (!(slot1.end <= slot2.start || slot2.end <= slot1.start)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Convert 24-hour time to 12-hour format\nfunction formatTime12Hour(minutes: number): string {\n  const totalMinutes = minutes % 1440; // Handle overflow\n  const hours = Math.floor(totalMinutes / 60);\n  const mins = totalMinutes % 60;\n  \n  const period = hours >= 12 ? 'PM' : 'AM';\n  const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n  \n  return `${displayHours}:${mins.toString().padStart(2, '0')} ${period}`;\n}\n\n// Format schedule for display in 12-hour format\nexport function formatScheduleDisplay(section: ProcessedSection): string {\n  // If it's a virtual class, return the label as is\n  if (section.label.toLowerCase().includes('virtual')) {\n    return section.label;\n  }\n  \n  const dayNames: Record<string, string> = {\n    'L': 'Lun',\n    'MI': 'Mié', \n    'J': 'Jue',\n    'V': 'Vie',\n    'S': 'Sáb',\n    'MA': 'Mar'\n  };\n  \n  if (section.slots.length === 0) {\n    return section.label;\n  }\n  \n  // Group slots by day\n  const dayGroups = new Map<string, { start: number; end: number }>();\n  \n  section.slots.forEach(slot => {\n    const dayOffset = slot.day === 'L' ? 0 : \n                      slot.day === 'MA' ? 1440 :\n                      slot.day === 'MI' ? 2880 :\n                      slot.day === 'J' ? 4320 :\n                      slot.day === 'V' ? 5760 :\n                      slot.day === 'S' ? 7200 : 0;\n    \n    const startMinutes = slot.start - dayOffset;\n    const endMinutes = slot.end - dayOffset;\n    \n    if (!dayGroups.has(slot.day)) {\n      dayGroups.set(slot.day, { start: startMinutes, end: endMinutes });\n    }\n  });\n  \n  // Check if all days have the same time\n  const times = Array.from(dayGroups.values());\n  const sameTime = times.every(t => t.start === times[0].start && t.end === times[0].end);\n  \n  if (sameTime && times.length > 0) {\n    const days = Array.from(dayGroups.keys()).map(d => dayNames[d] || d).join('/');\n    const startTime = formatTime12Hour(times[0].start);\n    const endTime = formatTime12Hour(times[0].end);\n    return `${days} ${startTime} a ${endTime}`;\n  }\n  \n  // Different times for different days\n  const schedules = Array.from(dayGroups.entries()).map(([day, time]) => {\n    const dayName = dayNames[day] || day;\n    const startTime = formatTime12Hour(time.start);\n    const endTime = formatTime12Hour(time.end);\n    return `${dayName} ${startTime} a ${endTime}`;\n  });\n  \n  return schedules.join(', ');\n}","size_bytes":7704},"design_guidelines.md":{"content":"# UTESA Medical Curriculum Planner - Design Guidelines\n\n## Design Approach\n**Selected Framework:** Productivity-focused design system inspired by Linear and Notion, optimized for information density and dark-mode professional aesthetics.\n\n**Core Principle:** Create a focused academic planning environment where complex scheduling data remains scannable and actionable through strategic hierarchy and contrast.\n\n## Color Palette\n\n### Dark Mode Foundation\n- **Background Primary:** 220 15% 8% (main canvas)\n- **Background Secondary:** 220 15% 12% (cards, panels)\n- **Background Tertiary:** 220 15% 16% (hover states, elevated surfaces)\n- **Border Subtle:** 220 10% 20%\n- **Border Emphasis:** 220 10% 30%\n\n### Medical Professional Accent\n- **Primary (Medical Blue):** 210 100% 60% (CTAs, active states)\n- **Primary Hover:** 210 100% 55%\n- **Success (Completed):** 142 70% 50%\n- **Warning (Conflicts):** 35 100% 60%\n- **Error (Prerequisites Missing):** 0 85% 60%\n- **Info (Optional Courses):** 200 95% 65%\n\n### Text Hierarchy\n- **Primary Text:** 220 10% 95%\n- **Secondary Text:** 220 8% 70%\n- **Tertiary Text:** 220 8% 50%\n- **Disabled Text:** 220 8% 35%\n\n## Typography\n- **Primary Font:** Inter (Google Fonts)\n- **Monospace (Course Codes):** JetBrains Mono (Google Fonts)\n\n**Scale:**\n- Headers H1: text-3xl font-semibold (Dashboard titles)\n- Headers H2: text-2xl font-semibold (Section headers)\n- Headers H3: text-xl font-medium (Card titles)\n- Body: text-base (Main content)\n- Small: text-sm (Metadata, labels)\n- Tiny: text-xs (Badges, timestamps)\n\n## Layout System\n**Spacing Primitives:** Standardize on 2, 4, 6, 8, 12, 16 tailwind units\n\n- Component padding: p-4 to p-6\n- Section gaps: gap-6 to gap-8\n- Page margins: Container max-w-7xl with px-6\n- Card spacing: space-y-4 internally\n\n**Grid Structure:**\n- Main dashboard: Sidebar (w-64) + Content area (flex-1)\n- Course grid: 3 columns on desktop (lg:grid-cols-3), 2 on tablet (md:grid-cols-2), 1 on mobile\n- Schedule view: Full-width timeline with scrollable horizontal terms\n\n## Component Library\n\n### Navigation\n**Sidebar Navigation:**\n- Fixed left sidebar (w-64) with background-secondary\n- Navigation items with hover:background-tertiary transition\n- Active state: border-l-2 border-primary with background-tertiary\n- Icon + label layout with pl-4\n- Bottom section for user profile and settings\n\n**Top Bar:**\n- Fixed header with backdrop-blur-sm bg-background-primary/80\n- Current term indicator (dropdown)\n- Quick actions (Add Course, Export Schedule)\n- User avatar and notifications\n\n### Course Cards\n**Standard Course Card:**\n- Background-secondary with border-subtle\n- Hover: border-emphasis + subtle shadow\n- Header: Course code (monospace, text-primary) + Credits badge\n- Title: text-lg font-medium\n- Prerequisites: Small badges with icon indicators\n- Status badge (top-right): Completed (green), In Progress (blue), Pending (gray), Conflict (red)\n- Footer: Term indicator + enrollment status\n\n### Interactive Elements\n\n**Dropdowns:**\n- Distinct border-emphasis on focus\n- Background-tertiary for dropdown items\n- Hover state: Background-primary with text-primary\n- Selected: Primary color indicator (left border or checkmark)\n- Clear visual separation between groups\n\n**Badges:**\n- Rounded-full px-3 py-1 text-xs font-medium\n- Color-coded backgrounds with 20% opacity\n- Contrasting text (use lighter shade of badge color)\n- Types: Term badges, status badges, credit counts, prerequisite indicators\n\n**Buttons:**\n- Primary: bg-primary text-white with hover:bg-primary-hover\n- Secondary: border-2 border-primary text-primary hover:bg-primary/10\n- Ghost: text-secondary hover:bg-tertiary\n- Disabled: opacity-40 cursor-not-allowed\n\n### Schedule Planning Interface\n\n**Term Timeline:**\n- Horizontal scrollable view with 18 term columns\n- Each term: bg-background-secondary rounded-lg with p-4\n- Term headers: Bold with term number + date range\n- Drag-and-drop zones with dashed borders when active\n- Conflict indicators: Red pulsing border on conflicting courses\n\n**Conflict Detection Panel:**\n- Sidebar panel (right side, slide-in)\n- Lists all detected conflicts with clear descriptions\n- Quick-fix suggestions with action buttons\n- Visual indicators linking to problematic courses\n\n### Progress Tracking\n\n**Dashboard Widgets:**\n- Overall Progress Ring: Large circular progress (200px diameter) with percentage\n- Credits Counter: Current/Total with visual bar\n- Term Completion Grid: 18-term grid with color-coded completion status\n- Upcoming Deadlines: List with date + course + action needed\n\n**Analytics Cards:**\n- GPA Tracker (if applicable)\n- Credit Distribution by term (bar chart)\n- Prerequisite Chain Visualization (tree diagram)\n- Completion Forecast timeline\n\n### Data Tables\n- Alternating row backgrounds (subtle: background-primary/background-secondary)\n- Sortable headers with arrow indicators\n- Fixed header on scroll\n- Row hover: background-tertiary\n- Selected row: border-l-4 border-primary\n\n## Animations & Interactions\n**Minimal Motion Philosophy:** Use animations only for feedback and state changes\n\n- Transitions: duration-200 ease-in-out for all hovers\n- Page transitions: Fade-in with slide-up (20px)\n- Modal overlays: backdrop blur + fade\n- Drag operations: Subtle scale (95%) on drag start\n- Success states: Single checkmark fade-in\n- Loading states: Subtle pulse on skeleton screens\n\n## Accessibility in Dark Mode\n- Ensure all form inputs have visible borders (border-emphasis)\n- Focus rings: 2px solid primary color with 2px offset\n- Dropdowns: Distinct background-tertiary with clear borders\n- Text inputs: Background-tertiary with border-subtle, focus:border-primary\n- Checkboxes/Radio: Custom styled with high contrast\n- All interactive elements minimum 44px touch target\n\n## Layout Sections\n\n### Dashboard (Home)\n- Top: Welcome header + current term selector + quick stats\n- Left: Sidebar navigation\n- Center: 2-column grid (Progress widgets + Recent activity)\n- Right: Quick actions panel (Add course, View conflicts, Export)\n\n### Course Management\n- Search/filter bar with term and category filters\n- Course grid (3 columns) with sorting options\n- Course detail modal: Full course info, prerequisites graph, add to schedule button\n\n### Schedule Planner\n- Full-width horizontal timeline (18 terms)\n- Drag-and-drop course cards between terms\n- Right panel: Course library (filterable)\n- Bottom panel: Conflict warnings (collapsible)\n\n### Progress Tracker\n- Top: Overall statistics row (4 cards)\n- Middle: Term-by-term breakdown (grid view)\n- Bottom: Detailed analytics charts\n\n## Images\n**No Hero Image Required** - This is a utility application, not a marketing page. Focus on data visualization and functional UI.\n\n**Icon Usage:**\n- Use Heroicons throughout for consistency\n- Course categories: Custom medical-themed icons (Stethoscope, Book, Flask, Brain, etc.)\n- Navigation: Standard icons (Dashboard, Calendar, BarChart, Settings)\n- Actions: Plus, Trash, Edit, Download icons\n\n**Data Visualization:**\n- Use chart libraries (Chart.js) for progress graphs\n- Prerequisite trees rendered with connecting lines\n- Color-coded term completion grids","size_bytes":7136},"scripts/merge-sections.ts":{"content":"import { readFileSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\ninterface Course {\n  id: string;\n  name: string;\n  credits: number;\n}\n\ninterface TimeSlot {\n  day: string;\n  start: number;\n  end: number;\n}\n\ninterface Section {\n  crn: string;\n  label: string;\n  room: string;\n  career?: string;\n  closed: boolean;\n  slots: TimeSlot[];\n}\n\ninterface CourseWithSections {\n  name: string;\n  id: string | null;\n  sections: Section[];\n}\n\ninterface SectionsData {\n  courses: CourseWithSections[];\n}\n\n// Day code mapping\nconst DAY_CODES: Record<string, string> = {\n  'L': 'Lun',\n  'MA': 'Mar',\n  'MI': 'Mié',\n  'J': 'Jue',\n  'V': 'Vie',\n  'S': 'Sáb'\n};\n\n// Minutes from start of week for each day\nconst DAY_OFFSETS: Record<string, number> = {\n  'L': 0,        // Monday\n  'MA': 1440,    // Tuesday\n  'MI': 2880,    // Wednesday\n  'J': 4320,     // Thursday\n  'V': 5760,     // Friday\n  'S': 7200      // Saturday\n};\n\nfunction parseTime(timeStr: string, isPM?: boolean): { hours: number; minutes: number; isPM: boolean } {\n  const match = timeStr.match(/(\\d+):(\\d+)\\s*(am|pm)?/i);\n  if (!match) throw new Error(`Invalid time format: ${timeStr}`);\n  \n  let hours = parseInt(match[1]);\n  const minutes = parseInt(match[2]);\n  \n  // Use provided period or detect from string\n  const explicitPeriod = match[3]?.toLowerCase();\n  const usePM = explicitPeriod ? explicitPeriod === 'pm' : (isPM ?? false);\n  \n  // Handle 12-hour format conversion\n  if (usePM && hours !== 12) hours += 12;\n  if (!usePM && hours === 12) hours = 0;\n  \n  return { hours, minutes, isPM: hours >= 12 };\n}\n\nfunction timeToMinutes(hours: number, minutes: number): number {\n  return hours * 60 + minutes;\n}\n\nfunction minutesToTime(totalMinutes: number): { hours: number; minutes: number } {\n  const hours = Math.floor(totalMinutes / 60) % 24;\n  const minutes = totalMinutes % 60;\n  return { hours, minutes };\n}\n\nfunction formatTime12Hour(hours: number, minutes: number): string {\n  const period = hours >= 12 ? 'PM' : 'AM';\n  const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;\n  return `${displayHours}:${minutes.toString().padStart(2, '0')} ${period}`;\n}\n\nfunction parseDayCodes(scheduleStr: string): string[] {\n  const days: string[] = [];\n  let i = 0;\n  \n  while (i < scheduleStr.length && /[A-Z]/.test(scheduleStr[i])) {\n    if (i + 1 < scheduleStr.length && /[A-Z]/.test(scheduleStr[i + 1])) {\n      const twoChar = scheduleStr.substring(i, i + 2);\n      if (DAY_CODES[twoChar]) {\n        days.push(twoChar);\n        i += 2;\n        continue;\n      }\n    }\n    const oneChar = scheduleStr[i];\n    if (DAY_CODES[oneChar]) {\n      days.push(oneChar);\n    }\n    i++;\n  }\n  \n  return days;\n}\n\nfunction parseSchedule(scheduleStr: string, credits: number): { slots: TimeSlot[]; label: string } {\n  // Handle virtual classes\n  if (scheduleStr.includes('Virtual') || scheduleStr.includes('VIRTU')) {\n    return {\n      slots: [],\n      label: 'Virtual'\n    };\n  }\n\n  // Check if it's a range format like \"J6:15 a 8:30 pm\"\n  const rangeMatch = scheduleStr.match(/([A-Z]+)(\\d+:\\d+)\\s*a\\s*(\\d+:\\d+)\\s*(am|pm)?/i);\n  if (rangeMatch) {\n    const days = parseDayCodes(rangeMatch[1]);\n    const period = rangeMatch[4]?.toLowerCase();\n    \n    // Parse end time first (it has the explicit period)\n    const endTime = parseTime(rangeMatch[3], period === 'pm');\n    \n    // Parse start time - infer period based on end time\n    let startTime = parseTime(rangeMatch[2], period === 'pm');\n    \n    // Ensure start is before end - if not, adjust start period\n    let startMinutes = timeToMinutes(startTime.hours, startTime.minutes);\n    let endMinutes = timeToMinutes(endTime.hours, endTime.minutes);\n    \n    if (startMinutes >= endMinutes) {\n      // Try flipping the period\n      startTime = parseTime(rangeMatch[2], period !== 'pm');\n      startMinutes = timeToMinutes(startTime.hours, startTime.minutes);\n      \n      // If still wrong, add 12 hours to end\n      if (startMinutes >= endMinutes && period === 'am') {\n        endMinutes += 720; // Add 12 hours\n      }\n    }\n    \n    const slots: TimeSlot[] = days.map(day => ({\n      day,\n      start: DAY_OFFSETS[day] + startMinutes,\n      end: DAY_OFFSETS[day] + endMinutes\n    }));\n\n    const dayNames = days.map(d => DAY_CODES[d]).join('/');\n    const label = `${dayNames} ${formatTime12Hour(startTime.hours, startTime.minutes)} a ${formatTime12Hour(endMinutes % 1440 / 60, endMinutes % 60)}`;\n    \n    return { slots, label };\n  }\n\n  // Condensed format like \"MAMI7:00,7:45 pm\" or \"L10:45,11:30,MA7:45,8:30 am\"\n  const days = parseDayCodes(scheduleStr);\n  const timeMatches = Array.from(scheduleStr.matchAll(/(\\d+):(\\d+)/g));\n  const periodMatch = scheduleStr.match(/(am|pm)/i);\n  const period = periodMatch ? periodMatch[1].toLowerCase() : 'am';\n  \n  if (timeMatches.length === 0 || days.length === 0) {\n    return { slots: [], label: scheduleStr };\n  }\n\n  // Parse all times mentioned\n  const times = timeMatches.map(m => {\n    const hours = parseInt(m[1]);\n    const minutes = parseInt(m[2]);\n    return { hours, minutes };\n  });\n\n  // Calculate session duration based on credits\n  // Each credit = 45 minutes total\n  const totalMinutes = credits * 45;\n  const sessionsPerWeek = days.length;\n  const minutesPerSession = Math.floor(totalMinutes / sessionsPerWeek);\n\n  const slots: TimeSlot[] = [];\n  const labelParts: string[] = [];\n\n  // Use the first time as start time for each day\n  const startTime = times[0];\n  let { hours: startHours, minutes: startMinutes } = startTime;\n  \n  // Apply AM/PM\n  if (period === 'pm' && startHours !== 12) startHours += 12;\n  if (period === 'am' && startHours === 12) startHours = 0;\n\n  const startTotalMinutes = timeToMinutes(startHours, startMinutes);\n  const endTotalMinutes = startTotalMinutes + minutesPerSession;\n  const endTime = minutesToTime(endTotalMinutes);\n\n  days.forEach(day => {\n    slots.push({\n      day,\n      start: DAY_OFFSETS[day] + startTotalMinutes,\n      end: DAY_OFFSETS[day] + endTotalMinutes\n    });\n  });\n\n  const dayNames = days.map(d => DAY_CODES[d]).join('/');\n  const label = `${dayNames} ${formatTime12Hour(startHours, startMinutes)} a ${formatTime12Hour(endTime.hours, endTime.minutes)}`;\n\n  return { slots, label };\n}\n\nfunction parseTxtLine(line: string, coursesMap: Map<string, Course>): Section | null {\n  // Skip closed sections\n  if (line.trim().startsWith('Cerrado')) {\n    return null;\n  }\n\n  // Split by tabs\n  const parts = line.split('\\t').map(p => p.trim()).filter(p => p);\n  \n  if (parts.length < 3) return null;\n\n  const crn = parts[0];\n  const subjectName = parts[1];\n  const schedule = parts[2];\n  const room = parts[3] || 'TBA';\n\n  // Extract course ID from CRN (e.g., ESP095001 -> ESP-095)\n  const crnMatch = crn.match(/^([A-Z]+)(\\d{3})/);\n  if (!crnMatch) return null;\n  \n  const courseId = `${crnMatch[1]}-${crnMatch[2]}`;\n  const course = coursesMap.get(courseId);\n  \n  if (!course) {\n    console.warn(`Course not found for CRN ${crn} (${courseId})`);\n    return null;\n  }\n\n  const { slots, label } = parseSchedule(schedule, course.credits);\n\n  return {\n    crn,\n    label,\n    room,\n    career: 'MED',\n    closed: false,\n    slots\n  };\n}\n\nfunction main() {\n  console.log('Starting sections merge...');\n\n  // Read courses.json\n  const coursesData: Course[] = JSON.parse(\n    readFileSync(join(process.cwd(), 'client/src/data/courses.json'), 'utf-8')\n  );\n\n  // Create courses map for quick lookup\n  const coursesMap = new Map<string, Course>();\n  coursesData.forEach(course => {\n    coursesMap.set(course.id, course);\n  });\n\n  // Read existing sections JSON\n  const existingSections: SectionsData = JSON.parse(\n    readFileSync(join(process.cwd(), 'attached_assets/medicine-2013-sections_1759011415431.json'), 'utf-8')\n  );\n\n  // Read TXT file\n  const txtContent = readFileSync(\n    join(process.cwd(), 'attached_assets/remaining-sections_1759467772127.txt'),\n    'utf-8'\n  );\n\n  // Parse TXT lines\n  const txtLines = txtContent.split('\\n').filter(line => line.trim());\n  const newSections: Section[] = [];\n\n  txtLines.forEach(line => {\n    const section = parseTxtLine(line, coursesMap);\n    if (section) {\n      newSections.push(section);\n    }\n  });\n\n  console.log(`Parsed ${newSections.length} sections from TXT file`);\n\n  // Create a map of existing sections by CRN\n  const existingSectionsByCRN = new Map<string, Section>();\n  existingSections.courses.forEach(course => {\n    course.sections.forEach(section => {\n      existingSectionsByCRN.set(section.crn, section);\n    });\n  });\n\n  // Group new sections by course name\n  const newSectionsByCourse = new Map<string, Section[]>();\n  newSections.forEach(section => {\n    const crnMatch = section.crn.match(/^([A-Z]+)(\\d{3})/);\n    if (!crnMatch) return;\n    \n    const courseId = `${crnMatch[1]}-${crnMatch[2]}`;\n    const course = coursesMap.get(courseId);\n    \n    if (course) {\n      if (!newSectionsByCourse.has(course.name)) {\n        newSectionsByCourse.set(course.name, []);\n      }\n      newSectionsByCourse.get(course.name)!.push(section);\n    }\n  });\n\n  // Merge sections\n  const mergedCourses: CourseWithSections[] = [...existingSections.courses];\n  const existingCourseNames = new Set(existingSections.courses.map(c => c.name));\n\n  newSectionsByCourse.forEach((sections, courseName) => {\n    if (existingCourseNames.has(courseName)) {\n      // Add to existing course\n      const course = mergedCourses.find(c => c.name === courseName)!;\n      sections.forEach(newSection => {\n        // Only add if CRN doesn't exist\n        if (!course.sections.find(s => s.crn === newSection.crn)) {\n          course.sections.push(newSection);\n        }\n      });\n    } else {\n      // Create new course entry\n      const crnMatch = sections[0].crn.match(/^([A-Z]+)(\\d{3})/);\n      const courseId = crnMatch ? `${crnMatch[1]}-${crnMatch[2]}` : null;\n      \n      mergedCourses.push({\n        name: courseName,\n        id: courseId,\n        sections\n      });\n    }\n  });\n\n  // Sort courses by name\n  mergedCourses.sort((a, b) => a.name.localeCompare(b.name));\n\n  // Write merged data\n  const outputPath = join(process.cwd(), 'client/src/data/sections-merged.json');\n  writeFileSync(\n    outputPath,\n    JSON.stringify({ courses: mergedCourses }, null, 2)\n  );\n\n  console.log(`Merged sections written to ${outputPath}`);\n  console.log(`Total courses: ${mergedCourses.length}`);\n  console.log(`Total sections: ${mergedCourses.reduce((sum, c) => sum + c.sections.length, 0)}`);\n}\n\nmain();\n","size_bytes":10471},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { neonConfig, Pool } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set. Did you forget to provision the database?\");\n}\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });\n","size_bytes":461},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { courses, sections } from \"@shared/schema\";\nimport coursesData from \"../client/src/data/courses.json\";\nimport sectionsData from \"../client/src/data/sections.json\";\n\nasync function seed() {\n  console.log(\"Starting database seed...\");\n\n  try {\n    console.log(`Inserting ${coursesData.length} courses...`);\n    for (const course of coursesData) {\n      await db.insert(courses).values(course).onConflictDoNothing();\n    }\n\n    console.log(`Inserting ${sectionsData.length} sections...`);\n    for (const section of sectionsData) {\n      await db.insert(sections).values(section).onConflictDoNothing();\n    }\n\n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed().then(() => process.exit(0));\n","size_bytes":828},"client/src/pages/admin-courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nconst courseFormSchema = z.object({\n  id: z.string().min(1, \"Course ID is required\"),\n  name: z.string().min(1, \"Course name is required\"),\n  credits: z.coerce.number().min(0, \"Credits must be positive\"),\n  theoreticalHours: z.coerce.number().min(0, \"Hours must be positive\"),\n  practicalHours: z.coerce.number().min(0, \"Hours must be positive\"),\n  term: z.coerce.number().min(1, \"Term must be at least 1\"),\n  block: z.string().min(1, \"Block is required\"),\n  prerequisites: z.string(),\n  corequisites: z.string(),\n  isElective: z.boolean(),\n  electiveType: z.string().optional(),\n  description: z.string().optional(),\n});\n\ntype CourseFormData = z.infer<typeof courseFormSchema>;\n\ninterface Course {\n  id: string;\n  name: string;\n  credits: number;\n  theoreticalHours: number;\n  practicalHours: number;\n  term: number;\n  block: string;\n  prerequisites: string[];\n  corequisites: string[];\n  isElective: boolean;\n  electiveType: string | null;\n  description: string | null;\n}\n\nexport function AdminCourses() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [editingCourse, setEditingCourse] = useState<Course | null>(null);\n  const { toast } = useToast();\n\n  const { data: courses = [], isLoading } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/courses\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setIsOpen(false);\n      toast({ title: \"Course created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create course\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) =>\n      apiRequest(`/api/admin/courses/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setIsOpen(false);\n      setEditingCourse(null);\n      toast({ title: \"Course updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update course\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/courses/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({ title: \"Course deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete course\", variant: \"destructive\" });\n    },\n  });\n\n  const form = useForm<CourseFormData>({\n    resolver: zodResolver(courseFormSchema),\n    defaultValues: {\n      id: \"\",\n      name: \"\",\n      credits: 0,\n      theoreticalHours: 0,\n      practicalHours: 0,\n      term: 1,\n      block: \"\",\n      prerequisites: \"\",\n      corequisites: \"\",\n      isElective: false,\n      electiveType: \"\",\n      description: \"\",\n    },\n  });\n\n  const onSubmit = (data: CourseFormData) => {\n    const payload = {\n      ...data,\n      prerequisites: data.prerequisites ? data.prerequisites.split(\",\").map(s => s.trim()).filter(Boolean) : [],\n      corequisites: data.corequisites ? data.corequisites.split(\",\").map(s => s.trim()).filter(Boolean) : [],\n    };\n\n    if (editingCourse) {\n      updateMutation.mutate({ id: editingCourse.id, data: payload });\n    } else {\n      createMutation.mutate(payload);\n    }\n  };\n\n  const handleEdit = (course: Course) => {\n    setEditingCourse(course);\n    form.reset({\n      id: course.id,\n      name: course.name,\n      credits: course.credits,\n      theoreticalHours: course.theoreticalHours,\n      practicalHours: course.practicalHours,\n      term: course.term,\n      block: course.block,\n      prerequisites: course.prerequisites.join(\", \"),\n      corequisites: course.corequisites.join(\", \"),\n      isElective: course.isElective,\n      electiveType: course.electiveType || \"\",\n      description: course.description || \"\",\n    });\n    setIsOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this course?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setEditingCourse(null);\n    form.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              Course Management\n            </h1>\n          </div>\n          <div className=\"flex gap-2\">\n            <Link href=\"/admin/sections\">\n              <Button variant=\"outline\" data-testid=\"button-sections\">\n                Manage Sections\n              </Button>\n            </Link>\n            <Dialog open={isOpen} onOpenChange={setIsOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => { setEditingCourse(null); form.reset(); }} data-testid=\"button-add-course\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Course\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingCourse ? \"Edit Course\" : \"Add New Course\"}\n                  </DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"id\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course ID</FormLabel>\n                          <FormControl>\n                            <Input {...field} disabled={!!editingCourse} data-testid=\"input-course-id\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-course-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"credits\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Credits</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-credits\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"theoreticalHours\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Theory Hours</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-theory-hours\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"practicalHours\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Practical Hours</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-practical-hours\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"term\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Term</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-term\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"block\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Block</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-block\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"prerequisites\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Prerequisites (comma-separated)</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., MED-100, MED-200\" data-testid=\"input-prerequisites\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"corequisites\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Corequisites (comma-separated)</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., MED-010\" data-testid=\"input-corequisites\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"isElective\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex items-center space-x-2\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                              data-testid=\"checkbox-is-elective\"\n                            />\n                          </FormControl>\n                          <FormLabel className=\"!mt-0\">Is Elective</FormLabel>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"electiveType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Elective Type</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., GEN, BASICAS, CLINICAS\" data-testid=\"input-elective-type\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} data-testid=\"input-description\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end gap-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                        {editingCourse ? \"Update\" : \"Create\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <p className=\"text-center text-gray-500 dark:text-gray-400\">Loading courses...</p>\n        ) : (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>ID</TableHead>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Credits</TableHead>\n                  <TableHead>Term</TableHead>\n                  <TableHead>Block</TableHead>\n                  <TableHead>Elective</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {courses.map((course) => (\n                  <TableRow key={course.id} data-testid={`row-course-${course.id}`}>\n                    <TableCell className=\"font-mono\" data-testid={`text-course-id-${course.id}`}>{course.id}</TableCell>\n                    <TableCell data-testid={`text-course-name-${course.id}`}>{course.name}</TableCell>\n                    <TableCell data-testid={`text-course-credits-${course.id}`}>{course.credits}</TableCell>\n                    <TableCell data-testid={`text-course-term-${course.id}`}>{course.term}</TableCell>\n                    <TableCell data-testid={`text-course-block-${course.id}`}>{course.block}</TableCell>\n                    <TableCell data-testid={`text-course-elective-${course.id}`}>\n                      {course.isElective ? \"Yes\" : \"No\"}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleEdit(course)}\n                          data-testid={`button-edit-${course.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDelete(course.id)}\n                          disabled={deleteMutation.isPending}\n                          data-testid={`button-delete-${course.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17375},"client/src/pages/admin-sections.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { ArrowLeft, Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst sectionFormSchema = z.object({\n  courseId: z.string().min(1, \"Course ID is required\"),\n  sectionNumber: z.string().min(1, \"Section number is required\"),\n  instructor: z.string().min(1, \"Instructor is required\"),\n  room: z.string().min(1, \"Room is required\"),\n  crn: z.string().min(1, \"CRN is required\"),\n  schedule: z.string().min(1, \"Schedule is required\"),\n  maxCapacity: z.coerce.number().min(1, \"Max capacity must be at least 1\"),\n  currentEnrollment: z.coerce.number().min(0, \"Enrollment must be non-negative\"),\n});\n\ntype SectionFormData = z.infer<typeof sectionFormSchema>;\n\ninterface Section {\n  id: string;\n  courseId: string;\n  sectionNumber: string;\n  instructor: string;\n  room: string;\n  crn: string;\n  schedule: { day: string; startTime: string; endTime: string }[];\n  maxCapacity: number;\n  currentEnrollment: number;\n}\n\ninterface Course {\n  id: string;\n  name: string;\n}\n\nexport function AdminSections() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [editingSection, setEditingSection] = useState<Section | null>(null);\n  const { toast } = useToast();\n\n  const { data: sections = [], isLoading } = useQuery<Section[]>({\n    queryKey: [\"/api/sections\"],\n  });\n\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/sections\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setIsOpen(false);\n      toast({ title: \"Section created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create section\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) =>\n      apiRequest(`/api/admin/sections/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      setIsOpen(false);\n      setEditingSection(null);\n      toast({ title: \"Section updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update section\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/sections/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({ title: \"Section deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete section\", variant: \"destructive\" });\n    },\n  });\n\n  const form = useForm<SectionFormData>({\n    resolver: zodResolver(sectionFormSchema),\n    defaultValues: {\n      courseId: \"\",\n      sectionNumber: \"\",\n      instructor: \"\",\n      room: \"\",\n      crn: \"\",\n      schedule: \"\",\n      maxCapacity: 30,\n      currentEnrollment: 0,\n    },\n  });\n\n  const onSubmit = (data: SectionFormData) => {\n    try {\n      const scheduleData = JSON.parse(data.schedule);\n      if (!Array.isArray(scheduleData)) {\n        toast({ title: \"Schedule must be a JSON array\", variant: \"destructive\" });\n        return;\n      }\n      \n      const payload = {\n        ...data,\n        schedule: scheduleData,\n      };\n\n      if (editingSection) {\n        updateMutation.mutate({ id: editingSection.id, data: payload });\n      } else {\n        createMutation.mutate(payload);\n      }\n    } catch (error) {\n      toast({ title: \"Invalid JSON format for schedule\", variant: \"destructive\" });\n    }\n  };\n\n  const handleEdit = (section: Section) => {\n    setEditingSection(section);\n    form.reset({\n      courseId: section.courseId,\n      sectionNumber: section.sectionNumber,\n      instructor: section.instructor,\n      room: section.room,\n      crn: section.crn,\n      schedule: JSON.stringify(section.schedule),\n      maxCapacity: section.maxCapacity,\n      currentEnrollment: section.currentEnrollment,\n    });\n    setIsOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this section?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setEditingSection(null);\n    form.reset();\n  };\n\n  const getCourseNameById = (courseId: string) => {\n    const course = courses.find((c) => c.id === courseId);\n    return course ? `${course.id} - ${course.name}` : courseId;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              Section Management\n            </h1>\n          </div>\n          <div className=\"flex gap-2\">\n            <Link href=\"/admin/courses\">\n              <Button variant=\"outline\" data-testid=\"button-courses\">\n                Manage Courses\n              </Button>\n            </Link>\n            <Dialog open={isOpen} onOpenChange={setIsOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => { setEditingSection(null); form.reset(); }} data-testid=\"button-add-section\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Section\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingSection ? \"Edit Section\" : \"Add New Section\"}\n                  </DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"courseId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-course\">\n                                <SelectValue placeholder=\"Select a course\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {courses.map((course) => (\n                                <SelectItem key={course.id} value={course.id}>\n                                  {course.id} - {course.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"sectionNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Section Number</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-section-number\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"crn\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>CRN</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-crn\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"instructor\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Instructor</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-instructor\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"room\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Room</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"input-room\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"schedule\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Schedule (JSON format)</FormLabel>\n                          <FormControl>\n                            <Input\n                              {...field}\n                              placeholder='[{\"day\":\"Monday\",\"startTime\":\"08:00\",\"endTime\":\"10:00\"}]'\n                              data-testid=\"input-schedule\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"maxCapacity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Max Capacity</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-max-capacity\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"currentEnrollment\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Current Enrollment</FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" {...field} data-testid=\"input-current-enrollment\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleClose} data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                        {editingSection ? \"Update\" : \"Create\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <p className=\"text-center text-gray-500 dark:text-gray-400\">Loading sections...</p>\n        ) : (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Course</TableHead>\n                  <TableHead>Section</TableHead>\n                  <TableHead>CRN</TableHead>\n                  <TableHead>Instructor</TableHead>\n                  <TableHead>Room</TableHead>\n                  <TableHead>Capacity</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {sections.map((section) => (\n                  <TableRow key={section.id} data-testid={`row-section-${section.id}`}>\n                    <TableCell data-testid={`text-course-${section.id}`}>\n                      {getCourseNameById(section.courseId)}\n                    </TableCell>\n                    <TableCell data-testid={`text-section-number-${section.id}`}>\n                      {section.sectionNumber}\n                    </TableCell>\n                    <TableCell data-testid={`text-crn-${section.id}`}>\n                      {section.crn}\n                    </TableCell>\n                    <TableCell data-testid={`text-instructor-${section.id}`}>\n                      {section.instructor}\n                    </TableCell>\n                    <TableCell data-testid={`text-room-${section.id}`}>\n                      {section.room}\n                    </TableCell>\n                    <TableCell data-testid={`text-capacity-${section.id}`}>\n                      {section.currentEnrollment}/{section.maxCapacity}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleEdit(section)}\n                          data-testid={`button-edit-${section.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDelete(section.id)}\n                          disabled={deleteMutation.isPending}\n                          data-testid={`button-delete-${section.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":15965}},"version":1}